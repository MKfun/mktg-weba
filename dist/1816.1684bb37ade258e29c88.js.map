{"version":3,"file":"1816.1684bb37ade258e29c88.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\n\ntype OwnProps = {\n  color: ColorKey | string;\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor = colorKey ? COLORS[colorKey][isDarkTheme ? 1 : 0] : undefined;\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n} : OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import React, { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftPremium, ApiMessageActionGiftStars } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          )}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message && (lang(action.type === 'giftPremium' ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>{lang('ActionGiveawayResultTitle')}</h3>\n        <div>\n          {action.type === 'giftCode' && (\n            lang(\n              action.isViaGiveaway ? 'ActionGiveawayResultPremiumText' : 'ActionGiftCodePremiumText',\n              { months: action.months, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = selectChat(global, action.boostPeerId!);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle, isChatChannel } from '../../../../global/helpers';\nimport { isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {action.gift.availabilityTotal && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(action.gift.availabilityTotal) })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = selectPeer(global, message.chatId);\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};","import React, { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const peer = isOutgoing ? recipient : sender;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = selectPeer(global, message.chatId);\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import React, { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPeerTitle, getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n} : OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n      && (isExpanded || isAnimating)\n      && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>{formatIntegerCompact(channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): StateProps => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import React, {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/windowEnvironment';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport PremiumGiftCode from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS: Set<ApiMessageAction['type']> = new Set([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS: Set<ApiMessageAction['type']> = new Set(['giftCode', 'prizeStars', 'suggestProfilePhoto']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId: message.chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isJustAdded,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [id] });\n    }\n  }, [hasUnreadReaction, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <PremiumGiftCode\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, observeIntersectionForLoading, message, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={styles.inlineWrapper}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={styles.inlineWrapper}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message!}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const { settings: { themes } } = global;\n    const tabState = selectTabState(global);\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n    };\n  },\n)(ActionMessage));\n","import React, { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n"],"names":["BadgeButton","children","className","onClick","React","createElement","buildClassName","COLORS","red","blue","COLOR_KEYS","Set","Object","keys","memo","withGlobal","global","theme","selectTheme","GiftRibbon","text","color","validSvgRandomId","useUniqueId","colorKey","has","undefined","gradientColor","startColor","endColor","styles","root","ribbon","width","height","viewBox","fill","d","id","x1","y1","x2","y2","gradientUnits","offset","AVATAR_SIZE","REM","ChannelPhotoAction","action","observeIntersection","Avatar","channelPhoto","photo","loopIndefinitely","withVideo","size","sticker","type","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","observeIntersectionForPlaying","stickerRef","useRef","lang","useLang","message","contentBox","tabIndex","role","ref","stickerWrapper","style","StickerView","containerRef","noLoad","info","title","pluralValue","amount","renderTextWithEntities","actionButton","Sparkles","preset","channel","selectChat","boostPeerId","GiveawayPrizeAction","channelLink","useMemo","channelTitle","getPeerTitle","channelFallbackText","renderPeerLink","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","messageSender","selectSender","giftSender","fromId","selectPeer","messageRecipient","chatId","sender","recipient","peerId","starGiftMaxConvertPeriod","appConfig","StarGiftAction","isOutgoing","getStickerFromGift","gift","peer","isChannel","isApiPeerChat","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","peerTitle","isSelf","giftDescription","peerLink","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","translateWithYou","isConverted","getServerTime","date","starGift","total","formatIntegerCompact","subtitle","MiniTable","data","valueClassName","keyClassName","map","key","value","Fragment","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","slice","tableData","name","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","clearBottomSector","textColor","number","uniqueValue","buildStyle","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","showNotification","getActions","cropModalBlob","setCropModalBlob","useState","isVideoModalOpen","openVideoModal","closeVideoModal","useFlag","suggestedPhotoUrl","useMedia","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","user","showAvatarNotification","useLastCallback","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","file","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","find","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","onClose","onChange","ConfirmDialog","isOpen","confirmHandler","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","useEffect","averageColor","getAverageColor","rgb2hex","useAverageColor","Icon","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","useOldLang","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","filter","Boolean","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","length","shouldRenderChannels","useHorizontalScroll","useTimeout","setTimeout","clearTimeout","current","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","xmlns","Button","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","HIDDEN_TEXT_ACTIONS","settings","themes","tabState","selectTabState","chat","isInsideTopic","isForum","replyToMsgId","replyToPeerId","getMessageReplyInfo","replyMessage","selectChatMessage","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","focusedMessage","hasUnreadReaction","unreadReactions","includes","currentUserId","isInSelectMode","selectIsInSelectMode","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","content","isLocal","isLocalMessageId","isTextHidden","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","messageReplyInfo","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useAppLayout","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","isPinned","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","IS_ELECTRON","IS_ANDROID","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","handleClick","ChannelAvatar","slug","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","PremiumGiftCode","Gift","StarGift","StarGiftUnique","getMessageHtmlId","singleLine","fluidMultiline","hasFullContent","onMouseDown","e","preventMessageInputBlur","onContextMenu","inlineWrapper","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","SVG_MAP","Map","SvgFluidBackgroundFilter","constructor","_defineProperty","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","result","mode","values","in2","operator","getFilterId","referenceCount","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","get","delete","prepareStyle","svg","set"],"sourceRoot":""}