{"version":3,"file":"6930.204bdfa0d1faa2f49d6c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/util/localization/format.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterUsersByName, isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = [\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    const filteredContactIds = filterUsersByName(combinedIds, usersById, searchQuery);\n\n    return sortChatIds(unique(filteredContactIds).filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"subtitle\":\"YN2J8dw6\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{getPeerTitle(lang, peer)}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {title}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.starRefCommision) {\n    return lang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return lang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getPeerTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, peer, transaction]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {extendedMedia ? <PaidMediaThumb media={extendedMedia} isTransactionPreview />\n          : <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />}\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const user = selectUser(global, originGift.userId);\n      if (!user) return undefined;\n      return oldLang('StarsNeededTextGift', getUserFullName(user));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal className={styles.root} isOpen={isOpen} onClose={closeStarsBalanceModal}>\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              className={buildClassName(styles.starButton, 'settings-main-menu-star')}\n              color=\"translucent\"\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              <StarIcon className=\"icon\" type=\"gold\" size=\"big\" />\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React from '../../lib/teact/teact';\n\nimport type { LangFn } from './types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../config';\n\nimport Icon from '../../components/common/icons/Icon';\nimport StarIcon from '../../components/common/icons/StarIcon';\n\nexport function formatStarsAsText(lang: LangFn, amount: number) {\n  return lang('StarsAmountText', { amount }, { pluralValue: amount });\n}\n\nexport function formatStarsAsIcon(lang: LangFn, amount: number, asFont?: boolean) {\n  const icon = asFont\n    ? <Icon name=\"star\" className=\"star-amount-icon\" />\n    : <StarIcon type=\"gold\" className=\"star-amount-icon\" size=\"adaptive\" />;\n  return lang('StarsAmount', { amount }, {\n    withNodes: true,\n    specialReplacement: {\n      [STARS_ICON_PLACEHOLDER]: icon,\n    },\n  });\n}\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, true),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const header = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n            nonInteractive\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction.starRefCommision) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, sticker, canPlayAnimatedEmojis]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      <BalanceBlock balance={starBalance} className={styles.modalBalance} />\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className={styles.checkbox}\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"checkbox\":\"oQ5Ar48z\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiUser } from '../../../api/types';\nimport type { GiftOption } from './GiftModal';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/ActionMessage';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  userId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  patternColor?: string;\n  user?: ApiUser;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  userId,\n  user,\n  captionLimit,\n  patternColor,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n\n  const isStarGift = 'id' in gift;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: true,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            targetUserIds: [userId],\n            mediaType: 'action',\n            text: 'ActionGiftInbound',\n            type: 'giftPremium',\n            amount: gift.amount,\n            currency: gift.currency,\n            months: gift.months,\n            message: {\n              text: giftMessage,\n            },\n            translationValues: ['%action_origin%', '%gift_payment_amount%'],\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: currentUserId!,\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          targetUserIds: [userId],\n          mediaType: 'action',\n          text: 'ActionGiftInbound',\n          type: 'starGift',\n          currency: STARS_CURRENCY_CODE,\n          amount: gift.stars,\n          starGift: {\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName,\n            starsToConvert: gift.starsToConvert,\n            isSaved: false,\n            isConverted: false,\n            gift,\n          },\n          translationValues: ['%action_origin%', '%gift_payment_amount%'],\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, userId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        userId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [userId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const userFullName = getUserFullName(user)!;\n\n    const amount = isStarGift\n      ? formatStarsAsIcon(lang, gift.stars, true)\n      : formatCurrency(gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && (\n          <div className={styles.description}>\n            {lang('GiftHideNameDescription', { profile: userFullName, receiver: userFullName })}\n          </div>\n        )}\n\n        <div className={styles.spacer} />\n\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'no-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={`--pattern-color: ${patternColor}`}\n      >\n        <ActionMessage key={isStarGift ? gift.id : gift.months} message={localMessage} />\n      </div>\n      {renderOptionsSection()}\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      patternColor,\n    } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      user,\n      patternColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  starGiftCategoriesByName,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] = useMemo(() => Object.keys(starGiftCategoriesByName)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [starGiftCategoriesByName]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('stock')}\n      {renderCategoryItem('limited')}\n      {starCategories.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGiftCategoriesByName } = global;\n\n    return {\n      starGiftCategoriesByName,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n  ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  user?: ApiUser;\n  isSelf?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftCategoriesByName,\n  starBalance,\n  user,\n  isSelf,\n}) => {\n  const {\n    closeGiftModal, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [isHeaderHidden, setIsHeaderHidden] = useState(true);\n  const [isHeaderForStarGifts, setIsHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIsHeaderHidden(true);\n      setSelectedGift(undefined);\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (selectedGift) return;\n\n    const { scrollTop } = e.currentTarget;\n\n    setIsHeaderHidden(scrollTop <= 150);\n\n    if (transitionRef.current && giftHeaderRef.current) {\n      const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n      const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n      setIsHeaderForStarGifts(headerTop - transitionTop <= 0);\n    }\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = isSelf\n    ? lang('StarGiftDescriptionSelf', undefined, {\n      withNodes: true,\n      renderTextFilters: ['br'],\n    })\n    : lang('StarGiftDescription', {\n      user: getUserFullName(user)!,\n    }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsHeaderForStarGifts('id' in gift);\n    setIsHeaderHidden(false);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftCategoriesByName[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (selectedGift) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={user}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && renderGiftPremiumHeader()}\n        {!isSelf && renderGiftPremiumDescription()}\n        {!isSelf && renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = Boolean(selectedGift);\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} />\n      <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={selectedGift ? 1 : 0}\n      >\n        {!selectedGift && renderMainScreen()}\n        {selectedGift && renderingModal?.forUserId && (\n          <GiftSendingOptions gift={selectedGift} userId={renderingModal.forUserId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGiftsById,\n    starGiftCategoriesByName,\n    stars,\n    currentUserId,\n  } = global;\n\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forUserId === currentUserId);\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById,\n    starGiftCategoriesByName,\n    starBalance: stars?.balance,\n    user,\n    isSelf,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'stock') return -1;\n  if (category === 'limited') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUserId,\n  userIds,\n}) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredContactIds = idsWithSelf ? filterUsersByName(idsWithSelf, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"amount\":\"zJS3I8BT\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"radialPattern\":\"FTlUxUWm\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"giftSticker\":\"iUDfJgbB\"};","import type { TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getUserFullName } from '../../../../global/helpers';\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatInteger, formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  userFrom?: ApiUser;\n  targetUser?: ApiUser;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal, userFrom, targetUser, currentUserId, starGiftMaxConvertPeriod,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisilibity,\n    convertGiftToStars,\n    openChatWithInfo,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isUserGift = typeGift && 'gift' in typeGift;\n  const userGift = isUserGift ? typeGift : undefined;\n  const canUpdate = Boolean(userGift?.messageId);\n  const isSender = userGift?.fromId === currentUserId;\n  const canConvertDifference = (userGift && starGiftMaxConvertPeriod && (\n    userGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isUserGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { fromId, messageId, isUnsaved } = userGift!;\n    changeGiftVisilibity({ userId: fromId!, messageId: messageId!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { fromId, messageId } = userGift!;\n    convertGiftToStars({ userId: fromId!, messageId: messageId! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId!, profileTab: 'gifts' });\n    handleClose();\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = giftAttributes || {};\n\n    if (!backdrop || !pattern || !isOpen) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [giftAttributes, isOpen]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted,\n    } = userGift || {};\n\n    const isVisibleForMe = isNameHidden && targetUser;\n\n    const description = (() => {\n      if (gift.type === 'starGiftUnique') {\n        return lang('GiftInfoCollectible', {\n          number: gift.number,\n        });\n      }\n      if (!userGift) return lang('GiftInfoSoldOutDescription');\n      if (!canUpdate && !isSender) return undefined;\n      if (!starsToConvert || canConvertDifference < 0) return undefined;\n      if (isConverted) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: formatInteger(starsToConvert!),\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoDescriptionOutConverted', {\n            amount: formatInteger(starsToConvert!),\n            user: getUserFullName(targetUser)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      return canUpdate\n        ? lang('GiftInfoDescription', {\n          amount: starsToConvert,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        })\n        : lang('GiftInfoDescriptionOut', {\n          amount: starsToConvert,\n          user: getUserFullName(targetUser)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n    })();\n\n    function getTitle() {\n      if (gift?.type === 'starGiftUnique') return gift.title;\n      if (!userGift) return lang('GiftInfoSoldOutTitle');\n\n      return canUpdate ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const descriptionColor = giftAttributes?.backdrop?.textColor;\n\n    const header = (\n      <div\n        className={buildClassName(styles.header, radialPatternBackdrop && styles.uniqueGift)}\n        style={buildStyle(descriptionColor && `--_color-description: ${descriptionColor}`)}\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          noLoop\n          nonInteractive\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {gift.type === 'starGift' && (\n          <p className={styles.amount}>\n            <span className={styles.amount}>\n              {formatInteger(gift.stars)}\n            </span>\n            <StarIcon type=\"gold\" size=\"middle\" />\n          </p>\n        )}\n        {description && (\n          <p className={buildClassName(styles.description, !userGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      if ((fromId || isNameHidden)) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          fromId ? { chatId: fromId } : (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ),\n        ]);\n      }\n\n      if (userGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          formatDateTimeToString(userGift.date * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.firstSaleDate) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, gift.stars)}\n          {canUpdate && canConvertDifference > 0 && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          lang('GiftInfoStatusNonUnique'),\n        ]);\n      }\n\n      if (userGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(userGift.message),\n        ]);\n      }\n    }\n\n    if (gift.type === 'starGiftUnique') {\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n      tableData.push([\n        lang('GiftInfoOwner'),\n        { chatId: gift.ownerId },\n      ]);\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // User names does not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectUser(global, recipientId)!;\n        const sender = senderId ? selectUser(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getUserFullName(recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoOriginalInfoText', {\n            user: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoOriginalInfo', {\n            user: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getUserFullName(sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoOriginalInfoTextSender', {\n            user: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoOriginalInfoSender', {\n            user: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const footer = (\n      <div className={styles.footer}>\n        {canUpdate && (\n          <div className={styles.footerDescription}>\n            <div>\n              {isUnsaved ? lang('GiftInfoHidden')\n                : lang('GiftInfoSaved', {\n                  link: <Link isPrimary onClick={handleOpenProfile}>{lang('GiftInfoSavedView')}</Link>,\n                }, {\n                  withNodes: true,\n                })}\n            </div>\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {!canUpdate && (\n          <Button size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {canUpdate && (\n          <Button size=\"smaller\" onClick={handleTriggerVisibility}>\n            {lang(isUnsaved ? 'GiftInfoMakeVisible' : 'GiftInfoMakeInvisible')}\n          </Button>\n        )}\n      </div>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, userGift, targetUser, giftSticker, lang, canUpdate, canConvertDifference, isSender, oldLang, gift,\n    radialPatternBackdrop, giftAttributes,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        header={modalData?.header}\n        hasBackdrop={Boolean(radialPatternBackdrop)}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {userGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoConvertDescription1', {\n              amount: formatStarsAsText(lang, userGift.starsToConvert!),\n              user: getUserFullName(userFrom)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {canConvertDifference > 0 && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isUserGift = typeGift && 'gift' in typeGift;\n\n    const fromId = isUserGift && typeGift.fromId;\n    const userFrom = fromId ? selectUser(global, fromId) : undefined;\n    const targetUser = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n    return {\n      userFrom,\n      targetUser,\n      currentUserId: global.currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\",\"clickable\":\"hjDEmFaT\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, onClick && styles.clickable, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","getGlobal","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","filteredContactIds","filterUsersByName","sortChatIds","unique","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","lang","useLang","smallerText","balanceBottom","StarIcon","formatStarsAmount","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","Icon","name","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","history","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","all","transactions","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","modalBalance","starButton","topupOptions","tos","list","sectionTitle","nextOffset","isText","disabled","isLoading","noForcedUpperCase","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","formatStarsAsText","pluralValue","formatStarsAsIcon","asFont","icon","withNodes","specialReplacement","STARS_ICON_PLACEHOLDER","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","openStarsBalanceModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withMarkdown","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","disclaimer","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","sticker","getStickerFromGift","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","AnimatedIconFromSticker","play","noLoop","nonInteractive","tableData","peerLabel","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","style","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","Separator","countText","Checkbox","label","theme","selectTheme","patternColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","isStarGift","localMessage","isOutgoing","senderId","action","targetUserIds","mediaType","STARS_CURRENCY_CODE","isNameHidden","starsToConvert","isSaved","isConverted","translationValues","months","handleGiftMessageChange","handleShouldHideNameChange","handleMainButtonClick","inert","ActionMessage","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","ripple","Switcher","renderOptionsSection","userFullName","formatCurrency","profile","receiver","availabilityRemains","PremiumProgress","isPrimary","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","caption","renderMonths","pill","fluid","GiftRibbon","percent","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGiftCategoriesByName","StarGiftCategoryList","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","starGiftsById","isSelf","boostPerSentGift","boostsPerSentGift","PremiumGiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","selectedGift","setSelectedGift","setIsHeaderHidden","isHeaderForStarGifts","setIsHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","slideClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","starGiftsTransition","starGiftsContainer","giftId","GiftItemStar","GiftSendingOptions","userSelectionLimit","giveawayAddPeersMax","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","selectedId","forceShowSelf","typeGift","fromId","userFrom","targetUser","starGiftMaxConvertPeriod","GiftInfoModal","closeGiftInfoModal","changeGiftVisilibity","convertGiftToStars","openChatWithInfo","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isUserGift","userGift","canUpdate","isSender","canConvertDifference","getServerTime","conversionLeft","giftSticker","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenProfile","profileTab","giftAttributes","getGiftAttributes","radialPatternBackdrop","backdrop","pattern","backdropColors","centerColor","edgeColor","RadialPatternBackground","radialPattern","backgroundColors","patternIcon","modalData","isVisibleForMe","number","descriptionColor","textColor","uniqueGift","buildStyle","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","giftValue","BadgeButton","total","upgradeStars","renderTextWithEntities","model","originalDetails","ownerId","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","sender","recipientLink","Link","senderLink","footerDescription","hasBackdrop","ConfirmDialog","confirmHandler","children","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","headerAvatarPeer","onButtonClick","handleOpenChat","absoluteCloseButtonColor","withEmojiStatus","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown"],"sourceRoot":""}