{"version":3,"file":"7768.81f4a57be390eff78916.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiPollResult, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const offsetId = (resultsByType?.[type])?.nextOffsetId;\n  const offsetRate = (resultsByType?.[type])?.nextOffsetRate;\n  const offsetPeerId = (resultsByType?.[type])?.nextOffsetPeerId;\n\n  // Stop loading if we have all the messages\n  if (resultsByType?.[type]?.totalCount && resultsByType[type]!.totalCount! >= resultsByType[type]!.foundIds.length) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate,\n    offsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    onFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive || !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStars, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport { getRequestInputInvoice, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsTransactions, closeInvoice,\n  openStarsTransactionFromReceipt,\n  openStarsTransactionModal,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsBalance,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await getPaymentForm(global, requestInputInvoice, tabId);\n\n  if (!result) {\n    return;\n  }\n\n  const { form, invoice } = result;\n\n  global = getGlobal();\n\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updatePayment(global, {\n    inputInvoice: payload,\n    isPaymentModalOpen: form.type === 'regular',\n    isExtendedMedia: (payload as any).isExtendedMedia,\n    status: undefined,\n  }, tabId);\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const theme = extractCurrentThemeParams();\n  const result = await callApi('getPaymentForm', inputInvoice, theme);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice,\n  } = result;\n\n  global = getGlobal();\n\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n\n  return { form, invoice };\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n\n  if (inputInvoice.type === 'stars') {\n    actions.requestConfetti({ withStars: true, tabId });\n  }\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const starsPayment = selectTabState(global, tabId).isStarPaymentModalOpen;\n  if (!starsPayment) return;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId) as ApiInputInvoiceStars;\n  const formId = selectPaymentFormId(global, tabId);\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    inputInvoice,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.nativeParams?.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const isOpen = Boolean(chatId);\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen,\n      prepaidGiveaway,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    starsGiftingModal: {\n      isOpen: true,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftingModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openPremiumGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserIds, tabId = getCurrentTabId(),\n  } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n\n  global = updateTabState(global, {\n    giftModal: {\n      isOpen: true,\n      forUserIds,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closePremiumGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n    },\n  };\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { chat, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction && 'emoticon' in reaction && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment, closeInvoice, openStarsTransactionModal, updatePayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const originPayment = selectTabState(global, tabId).starsBalanceModal?.originPayment;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n    ...(originPayment && {\n      starsBalanceModal: undefined,\n    }),\n  }, tabId);\n\n  // Re-open previous payment modal\n  if (originPayment) {\n    global = updatePayment(global, originPayment, tabId);\n    global = updateTabState(global, {\n      isStarPaymentModalOpen: true,\n    }, tabId);\n  }\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { originPayment, tabId = getCurrentTabId() } = payload || {};\n\n  global = clearPayment(global, tabId);\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originPayment,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const { users, chats, threadInfos } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { closeInvoice, updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice, invoice } = selectTabState(global, tabId).payment;\n\n        if (!areDeepEqual(inputInvoice, update.inputInvoice)) return;\n\n        if (invoice) {\n          const { amount, currency, title } = invoice;\n\n          actions.showNotification({\n            tabId,\n            message: langProvider.oldTranslate('PaymentInfoHint', [\n              formatCurrencyAsString(amount, currency, langProvider.getTranslationFn().code),\n              title,\n            ]),\n          });\n        }\n\n        if (inputInvoice?.type === 'giftcode') {\n          if (!inputInvoice.userIds) {\n            return;\n          }\n          const giftModalState = selectTabState(global, tabId).giftModal;\n\n          if (giftModalState && giftModalState.isOpen\n            && areDeepEqual(inputInvoice.userIds, giftModalState.forUserIds)) {\n            global = updateTabState(global, {\n              giftModal: {\n                ...giftModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'starsgift') {\n          if (!inputInvoice.userId) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen\n            && areDeepEqual(inputInvoice.userId, starsModalState.forUserId)) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        if (inputInvoice?.type === 'stars') {\n          if (!inputInvoice.stars) {\n            return;\n          }\n          const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n          if (starsModalState && starsModalState.isOpen) {\n            global = updateTabState(global, {\n              starsGiftModal: {\n                ...starsModalState,\n                isCompleted: true,\n              },\n            }, tabId);\n            global = closeInvoice(global, tabId);\n          }\n        }\n\n        setGlobal(global);\n      });\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftModal = useModuleLoader(Bundles.Extra, 'PremiumGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftModal ? <PremiumGiftModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Extra, 'StarsGiftModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\ntype OwnProps = {\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n};\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (!asForwarded && calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n    && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {shouldRenderForwardAvatar && (\n              <Avatar\n                className=\"forward-avatar\"\n                peer={senderPeer}\n                size=\"micro\"\n              />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n    openMediaViewer,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const hasMedia = Boolean(photo || video);\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      style={style}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onPinnedIntersectionChange,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isRepliesChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PremiumGiftModal from '../main/premium/PremiumGiftModal.async';\nimport StarsGiftModal from '../main/premium/StarsGiftModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isPremiumGiftModalOpen?: boolean;\n  isStarsGiftModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isPremiumGiftModalOpen,\n  isStarsGiftModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <PremiumGiftModal isOpen={isPremiumGiftModalOpen} />\n      <StarsGiftModal isOpen={isStarsGiftModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftModal, starsGiftModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isPremiumGiftModalOpen: giftModal?.isOpen,\n      isStarsGiftModalOpen: starsGiftModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'starsBalanceModal' |\n'isStarPaymentModalOpen' |\n'webApp' |\n'starsTransactionModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  webApp: WebAppModal,\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  isStarPaymentModalOpen: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Extra, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Extra, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Extra, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  pinnedStoryIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    handleLoadCommonChats,\n    searchSharedMediaMessages,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiPrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_TO_BE_DISTRIBUTED } from '../../../util/objects/customPeer';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={!boost.userId ? CUSTOM_PEER_TO_BE_DISTRIBUTED : undefined}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback((e) => {\n    e.preventDefault();\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiPrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => (\n                <ListItem\n                  key={prepaidGiveaway.id}\n                  className=\"chat-item-clickable\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                >\n                  <div className={buildClassName(styles.status, 'status-clickable')}>\n                    <div>\n                      <img\n                        src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                        className={styles.giveawayIcon}\n                        alt={lang('Giveaway')}\n                      />\n                    </div>\n                    <div className={styles.info}>\n                      <h3>\n                        {lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                      </h3>\n                      <p className={styles.month}>{lang('PrepaidGiveawayMonths', prepaidGiveaway.months)}</p>\n                    </div>\n                    <div className={styles.quantity}>\n                      <div className={buildClassName(styles.floatingBadge,\n                        styles.floatingBadgeButtonColor,\n                        styles.floatingBadgeButton)}\n                      >\n                        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                        <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                          {prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </ListItem>\n              ))}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <div className={styles.section}>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </div>\n            )}\n            <div className={styles.section}>\n              {Boolean(boostersToLoadCount) && (\n                <ListItem\n                  key=\"load-more\"\n                  className={styles.showMore}\n                  disabled={boostStatistics?.isLoadingBoosters}\n                  onClick={handleLoadMore}\n                >\n                  {boostStatistics?.isLoadingBoosters ? (\n                    <Spinner className={styles.loadMoreSpinner} />\n                  ) : (\n                    <Icon name=\"down\" className={styles.down} />\n                  )}\n                  {lang('ShowVotes', boostersToLoadCount, 'i')}\n                </ListItem>\n              )}\n            </div>\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance);\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.filter(Boolean).forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}<span className={styles.decimalPart}>.{decimalTonPart}</span>\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}<span className={styles.decimalUsdPart}>.{decimalUsdPart}</span>\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ConfettiStyle, TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumGiftingPickerModal = useModuleLoader(Bundles.Extra, 'PremiumGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumGiftingPickerModal ? <PremiumGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default PremiumGiftingPickerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Extra, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumGiftingPickerModal from './premium/PremiumGiftingPickerModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isPremiumGiftingPickerModal?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isPremiumGiftingPickerModal,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      {isGiveawayModalOpen && <GiveawayModal isOpen={isGiveawayModalOpen} />}\n      {isPremiumGiftingPickerModal && <PremiumGiftingPickerModal isOpen={isPremiumGiftingPickerModal} />}\n      {isStarsGiftingPickerModal && <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      giftingModal,\n      starsGiftingModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isPremiumGiftingPickerModal: giftingModal?.isOpen,\n      isStarsGiftingPickerModal: starsGiftingModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","oldSections","reportAdModal","sections","selectedOption","o","newSection","title","subtitle","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","offsetRate","nextOffsetRate","offsetPeerId","nextOffsetPeerId","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","onFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","form","setPaymentForm","getPaymentForm","setInvoiceInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","isStarPaymentModalOpen","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","requestConfetti","withStars","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","giveawayModal","gifts","giftingModal","starsGiftingModal","transaction","getStarsTransactionFromGift","openStarsTransactionModal","forUserIds","giftModal","forUserId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","stars","needsTopupOptions","topupOptions","balance","history","inbound","outbound","appendStarsTransactions","isInbound","isOutbound","updateStarsBalance","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","isInvertedMedia","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","originPayment","starsBalanceModal","clearPayment","starsTransactionModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","reactionPicker","sendAsMessage","isForEffects","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrencyAsString","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","PremiumGiftModal","StarsGiftModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","fromId","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","REACTION_SIZE","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","counter","isOutside","metaChildren","noRecentReactors","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","ReactionButton","shouldPlayEffect","withEffect","onStopEffect","openStickerSet","effectRef","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","shouldRenderEffect","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","beginHeavyAnimation","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","handleOpenMedia","SponsoredMessage","hasMedia","renderMediaContent","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isPremiumGiftModalOpen","isStarsGiftModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","WebAppModal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","StarsTransactionModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","isSavedMessages","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftBlueRound","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","CUSTOM_PEER_TO_BE_DISTRIBUTED","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","canWithdraw","ensureLovelyChart","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","textBottom","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumGiftingPickerModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isPremiumGiftingPickerModal","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","prefix","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}