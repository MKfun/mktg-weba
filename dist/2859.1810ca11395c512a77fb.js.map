{"version":3,"file":"2859.1810ca11395c512a77fb.js","mappings":"gYAgIA,MAGMA,EAA4B,IAAIC,IAAI,CACxC,mBACA,qBACA,qBAGIC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GA0BvE,SAASG,EAAkBC,EAAgBC,IACzCC,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEF,SAAQC,YACzC,CAEA,SAASE,EACPC,EAAWC,EAAoBC,MAC3BC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMC,GAAqBC,EAAAA,EAAAA,KAAyBN,EAAQG,GACtDI,EAAgBF,GAAoBT,OACpCY,EAAkBH,GAAoBR,SAE5C,GAAIU,IAAkBA,IAAkBN,GAAaO,IAAoBN,GAAc,CACrF,MAAOO,EAAcC,GAAkBC,OAAOC,OAAOZ,EAAOa,SACzDC,QAAO,EAAEC,EAAkBC,IAAuBC,GAAIC,MACrD,GAAIA,IAAef,GAAUY,GAAoBC,EAC/C,MAAO,CAACD,EAAkBC,GAG5B,MAAMG,GAAmBb,EAAAA,EAAAA,KAAyBN,EAAQkB,GACpDE,EAAaD,GAAkBvB,SAAWW,EAGhD,MAAO,CAACQ,GAAoBK,EAAYJ,GAFnBI,GAAcD,GAAkBtB,WAAaW,EAES,GAC1E,CAACD,IAAkBN,GAAW,MAEFQ,IAAiBC,IAGhDf,EAAkBY,EAAeE,EAAeD,OAAkBa,EAEtE,CACF,CAomFAC,eAAeC,EACbC,EACAC,EACAC,GAGA,IAAI1B,GAAS2B,EAAAA,EAAAA,MACTC,GAA4BC,EAAAA,EAAAA,KAA8B7B,IAASiB,GAEvE,MAAMa,EAAUJ,EAA6E,CAAC,GAArDK,EAAAA,EAAAA,KAAgC/B,EAAQwB,GAC3EQ,EAAaF,EAAOG,kBAAmBC,EAAAA,EAAAA,KAAWlC,EAAQ8B,EAAOG,uBAAoBZ,EACrFc,EAAaL,EAAOM,eACpBC,EAAWP,EAAOQ,aAElBC,IAAgBb,GAA2BM,GAAeG,GAAeE,GAEzEG,EAAsB,UAAbhB,QAA6B1B,EAAAA,EAAAA,IAAQ,kBAAmB,CACrE2C,MAAOC,EAAAA,IACPP,aACAE,WACAL,aACAW,WAAYJ,UACHzC,EAAAA,EAAAA,IAAQ,aAAc,CAC/B2C,MAAOC,EAAAA,IACPP,aACAE,WACAL,aACAY,SAAuB,aAAbpB,EACVmB,WAAYJ,EACZX,8BAGF,IAAKY,EACH,OAGF,MAAM,QAAEK,GAAYL,EAEpBxC,GAAS2B,EAAAA,EAAAA,MACTC,GAA4BC,EAAAA,EAAAA,KAA8B7B,IAASiB,GAEnE,MAAM6B,GAAWC,EAAAA,EAAAA,IAAqBP,EAAOQ,MAAO,MAEpDhD,GAASiD,EAAAA,EAAAA,KAAYjD,GAAQ+C,EAAAA,EAAAA,IAAqBP,EAAOU,MAAO,OAChElD,GAASmD,EAAAA,EAAAA,KAAYnD,EAAQ8C,GACzBP,GACFvC,GAASoD,EAAAA,EAAAA,KAAmBpD,EAAQwB,EAAUqB,GAC9C7C,GAASqD,EAAAA,EAAAA,KAAoBrD,EAAQwC,EAAOc,oBAE5CtD,GAASuD,EAAAA,EAAAA,KAAevD,EAAQwB,EAAUqB,GAC1C7C,GAASwD,EAAAA,EAAAA,KAAgBxD,EAAQwC,EAAOc,mBAG1CtD,GAASyD,EAAAA,EAAAA,KAA4BzD,EAAQwB,EAAUgB,GACvDxC,GAAS0D,EAAAA,EAAAA,KAAgB1D,EAAQwC,EAAOmB,UACxC3D,GAAS4D,EAAAA,EAAAA,KAAyB5D,EAAQwC,EAAOqB,oBAAqBrC,GAEjEE,IACH1B,GAAS8D,EAAAA,EAAAA,KACP9D,EAAQwB,EAAUgB,EAAOF,aAAcE,EAAOP,iBAAkBO,EAAOJ,kBAIlDX,EAAkBe,EAAOK,QAAUlC,OAAOoD,KAAKvB,EAAOwB,aAC9DC,SAASrE,IACxB,MAAMsE,EAAQ1B,EAAOwB,WAAWpE,GAC1BuE,GAASC,EAAAA,EAAAA,KAAapE,EAAQJ,EAAQyE,EAAAA,KAEvCH,GAAUC,MAEVG,EAAAA,EAAAA,KAAYtE,EAAQJ,EAAQyE,EAAAA,KAAiBE,UAChDvE,GAASwE,EAAAA,EAAAA,KACPxE,EAAQJ,EAAQyE,EAAAA,GAAgB,QAASH,IAE7C,IAGsB,IAAnBrB,EAAQ4B,QAAgB5B,EAAQ4B,SAAWjC,EAAOkC,gBAAoB1E,EAAOgD,MAAM2B,cAAcnD,KACpGxB,EAAS,IACJA,EACHgD,MAAO,IACFhD,EAAOgD,MACV2B,cAAe,IACV3E,EAAOgD,MAAM2B,cAChB,CAACnD,IAAW,OAMpBoD,EAAAA,EAAAA,IAAU5E,EACZ,CAEOsB,eAAeuD,EACpB7E,EAAW8E,EAAgCC,GAE3C,MAAMvC,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiBiF,GAC9C,IAAKvC,EACH,OAGF,MAAM,MACJQ,EAAK,iBAAEM,EAAgB,SAAE0B,EAAQ,UAAEC,EAAS,aAAEC,EAAY,kBAAEC,GAC1D3C,EASJ,GAPAxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASmD,EAAAA,EAAAA,KAAYnD,GAAQ+C,EAAAA,EAAAA,IAAqBC,EAAO,OAErDM,IACFtD,GAASwD,EAAAA,EAAAA,KAAgBxD,EAAQsD,IAG/B2B,EAAW,CACb,MAAMG,GAAoBC,EAAAA,EAAAA,IAAgBrF,EAAQiF,EAAUhE,IAC5DjB,GAASsF,EAAAA,EAAAA,IACPtF,EACAiF,EAAUhE,IACVsE,EAAAA,EAAAA,IAAKN,EAAW,CAAC,kBAAmB,kBACpC5D,EACA+D,OAAoB/D,EAAY4D,EAAUO,kBAE9C,MAEqBnE,IAAjB6D,IACFlF,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI,CAAEiE,kBAErCH,EAAKW,UACP1F,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI,CAAEkE,uBAEzCnF,GAAS2F,EAAAA,EAAAA,KAAoB3F,EAAQ+E,EAAK9D,GAAI+D,IAC9CJ,EAAAA,EAAAA,IAAU5E,GAEV,MAAM4F,EAAaZ,EAASY,WACtBC,EAAWD,IAAcE,EAAAA,EAAAA,KAAiB9F,EAAQ4F,GACpDA,IAAeC,GACjBf,EAAQiB,aAAa,CACnBC,eAAgB,CACd/E,GAAI2E,EAAW3E,GACfgF,WAAYL,EAAWK,cAK7B,MAAMC,EAAWlB,EAASkB,SACpBC,EAAgBD,IAAYJ,EAAAA,EAAAA,KAAiB9F,EAAQkG,GAU3D,OATIA,IAAaC,GACfrB,EAAQiB,aAAa,CACnBC,eAAgB,CACd/E,GAAIiF,EAASjF,GACbgF,WAAYC,EAASD,cAKpBzD,CACT,CAqBOlB,eAAe8E,EACpBpG,EACAqG,EACAC,GAEAtG,GAAS2B,EAAAA,EAAAA,MACT,MAAM4E,EAAaD,OAAoDjF,GAAzCmF,EAAAA,EAAAA,KAAqBxG,EAAQqG,GAC3D,GAAIE,IAAcA,EAAUE,MAC1B,OAAOF,EAGT,MAAM,KAAExB,EAAI,KAAE2B,SAAe5G,EAAAA,EAAAA,IAAQ,oBAAqBuG,EAAUC,IAAa,CAAC,EAClF,OAAKvB,GAIL/E,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI8D,GACjC2B,IACF1G,GAAS2G,EAAAA,EAAAA,KAAW3G,EAAQ0G,EAAKzF,GAAIyF,KAGvC9B,EAAAA,EAAAA,IAAU5E,GAEH+E,QAZP,CAaF,CAwCAzD,eAAesF,EACb5G,EAAW8E,EAAgCuB,MACvClG,GAAQC,EAAAA,EAAAA,QAEZ,MAAM2E,QAAaqB,EAAoBpG,EAAQqG,GAC/C,IAAKtB,EAAM,OAEX/E,GAAS2B,EAAAA,EAAAA,MACT,MAAM+E,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQ+E,EAAK9D,IACrC,IAAKyF,EAAM,OAGX,KADcI,EAAAA,EAAAA,KAAUJ,GACZ,OACZ,MAAMlE,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CiH,IAAKL,IAIP,GADA1G,GAAS2B,EAAAA,EAAAA,MACJa,EAUL,OAFAoC,EAAAA,EAAAA,IAAU5E,GAEHwC,EAAOuE,IATZjC,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,0CACnC/G,SAQN,CA8EAmB,eAAe6F,EACbnH,EACA8E,EACAC,EACAjD,MAWI3B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,cACJgH,EAAa,SAAEvH,EAAQ,UAAEwH,EAAS,WAAEC,EAAU,SAAEhB,EAAQ,YAAEiB,EAAW,OAAEC,EAAM,KAAEC,EAAI,UAAEC,GACnF5F,EAEJ,GAAIuF,EAAW,CACb,IAAIM,GAAmB,EAEvB,GAAI5C,EAAKW,UAAY7F,EAAU,CAC7B,IAAI+H,GAAQC,EAAAA,EAAAA,KAAa7H,EAAQ+E,EAAK9D,MAAMoG,GAC5C,IAAKO,EAAO,CACV,MAAME,QAAoBhI,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEiF,OAAMgD,QAASV,IACrEO,EAAQE,GAAaF,KACvB,CAEIA,IACF9C,EAAQkD,WAAW,CACjBpI,OAAQmF,EAAK9D,GAAIpB,SAAU+H,EAAM3G,GAAId,UAEvCwH,GAAmB,EAEvB,CAEKA,GACH7C,EAAQmD,aAAa,CACnBrI,OAAQmF,EAAK9D,GAAIpB,WAAUwH,YAAWK,YAAWvH,SAGvD,MAAYiH,GACVtC,EAAQkD,WAAW,CAAEpI,OAAQmF,EAAK9D,GAAIpB,SAAUA,GAAYwE,EAAAA,GAAgBlE,UAG1EmH,IAAehB,GACjBxB,EAAQoD,SAAS,CAAEC,MAAOpD,EAAK9D,GAAImH,MAAOd,IAGxCE,GAEFa,EADArI,GAAS2B,EAAAA,EAAAA,MACsBmD,EAASC,EAAK9D,GAAIuG,EAAQD,EAAapH,GAGpEsH,GACF3C,EAAQwD,kBAAkB,CAAE1I,OAAQmF,EAAK9D,GAAIwG,KAAM,CAAEA,QAAQtH,UAG3DkH,GAAaK,GACf5C,EAAQyD,uBAAuB,CAC7B3I,OAAQmF,EAAK9D,GAAIpB,WAAUwH,YAAWK,YAAWvH,SAGvD,CAEAmB,eAAe+G,EACbrI,EACA8E,EACAlF,EACA4H,EACAD,MACIpH,GAAQC,EAAAA,EAAAA,QAEZJ,GAAS2B,EAAAA,EAAAA,MACT,MAAMoF,QAAYH,EAAqB5G,EAAQ8E,EAAS0C,EAAQrH,GAC3D4G,GAELjC,EAAQ0D,cAAc,CACpBzB,MACAnH,YAC2B,iBAAhB2H,GAA4B,CAAED,WAAYC,GACrDpH,SAEJ,CAEOmB,eAAemH,EACpBzI,EACA8E,EACAlF,MACIO,GAAQC,EAAAA,EAAAA,QAEZ,MAAM2E,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,KAAS4D,EAAAA,EAAAA,KAAiB5D,GAC7B,OAAOA,EAGT,MAAM6D,QAlSDtH,eACLtB,EAAW8E,EAAgCC,MACvC5E,GAAQC,EAAAA,EAAAA,QAEZ,IAGE,aAFyBN,EAAAA,EAAAA,IAAQ,cAAeiF,EAGlD,CAAE,MAAO8D,GAOP,YANoC,sBAA/BA,EAAmB5B,QACtBnC,EAAQgE,sBAAsB,CAAErG,MAAO,WAAYtC,UAEnD2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,UAI9E,CACF,CAiRwB+I,CAAYlJ,EAAQ8E,EAASC,EAAM5E,GACzD,OAAKyI,GAIL9D,EAAQD,aAAa,CAAEjF,OAAQgJ,EAAQ3H,KACvC6D,EAAQqE,SAAS,CAAElI,GAAI2H,EAAQ3H,GAAId,UAE5ByI,QAPP,CAQF,EApmGAQ,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,KACxD,MAAMuE,EAAmB,IAAIhK,IAE7B,IAAK,IAAIiK,EAAI,EAAGA,EAAIC,EAAAA,IAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAhBiC,KAkBvCxJ,GAAS2B,EAAAA,EAAAA,MACT,MAAM8H,EAAiB9I,OAAOC,OAAOZ,EAAOa,SAEzC6I,KAAI,EAAGzI,GAAId,MAAYG,EAAAA,EAAAA,KAAyBN,EAAQG,IAAQP,SAChE+J,OAAOC,SAEJC,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,KACpCC,EAAaH,GAAqBI,MAAMhJ,IAAQwI,EAAeS,SAASjJ,KAAQoI,EAAiBc,IAAIlJ,KAC3G,IAAK+I,EACH,OAGFX,EAAiBe,IAAIJ,GAErBlF,EAAQuF,qBAAqB,CAAEzK,OAAQoK,EAAYnK,SAAUwE,EAAAA,GAAgBlE,OAAOC,EAAAA,EAAAA,OACtF,MAqCFgJ,EAAAA,EAAAA,IAAiB,YAAY,CAACpJ,EAAQ8E,EAASwF,KAC7C,MAAM,GACJrJ,EAAE,KAAEsJ,EAAI,kBAAEC,EAAiB,qBAAEC,EAAoB,kBAAEC,EAAiB,MACpEvK,GAAQC,EAAAA,EAAAA,OACNkK,EAcJ,GAZAxF,EAAQ6F,wBAAwB,CAC9B/K,OAAQqB,EACRsJ,OACA1K,SAAUwE,EAAAA,GACVmG,oBACAC,uBACAC,oBACAvK,UAGFJ,EAAgCC,EAAQiB,EAAIoD,EAAAA,GAAgBlE,IAEvDc,GAAMA,IAAO2J,EAAAA,IAChB,OAGF,MAAM7F,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAE5B8D,GAAM8F,eACR/F,EAAQgG,iBAAiB,CAAE7J,OAG7B,MAAM8J,IAAqBC,EAAAA,EAAAA,KAAwBhL,EAAQiB,GAE3D,GAAK8D,EASMgG,IAAsBhG,EAAK0B,OACpC3B,EAAQmG,kBAAkB,CAAErL,OAAQqB,SATpC,IAAIiK,EAAAA,EAAAA,KAAqBlL,EAAQiB,IAC1BnB,EAAAA,EAAAA,IAAQ,YAAa,CAAEyK,KAAM,aAC7B,CACL,MAAM7D,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQiB,GAC5ByF,IACG5G,EAAAA,EAAAA,IAAQ,YAAa,CAAEyK,KAAM,OAAQ7D,QAE9C,CAGF,KAGF0C,EAAAA,EAAAA,IAAiB,mBAAmB,CAACpJ,EAAQ8E,EAASwF,KACpD,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,SAAsB+K,GAAgBb,EAE9DxF,EAAQkD,WAAW,CACjBpI,OAAQI,EAAOoL,cACfvL,SAAUD,EACVO,WACGgL,GACH,KAGJ/B,EAAAA,EAAAA,IAAiB,cAAc9H,MAAOtB,EAAQ8E,EAASwF,KACrD,MAAM,KACJC,EAAI,WAAEc,EAAU,kBAAEb,EAAiB,qBAAEC,EAAoB,kBAAEC,EAAiB,eAC5EY,EAAc,MACdnL,GAAQC,EAAAA,EAAAA,OACNkK,EACJ,IACIzK,EACA0L,EACAC,GAHA,OAAE5L,GAAW0K,EAKjB,GAAKe,EA6BE,CACL,MAAM,gBAAEI,EAAe,gBAAEC,GAAoBpB,EAE7CiB,EAAgBE,EAChBD,EAAkBE,CACpB,KAlCiB,CACfH,EAAgBjB,EAAQ1K,OACxBC,EAAWyK,EAAQzK,SACnB2L,EAAkB3L,EAElB,MAAM8L,GAAejD,EAAAA,EAAAA,KAAW1I,EAAQuL,GACxC,GAAI1L,IAAawE,EAAAA,GASf,YARAS,EAAQqE,SAAS,CACflI,GAAIrB,EACJ2K,OACAC,oBACAC,uBACAC,oBACAvK,UAGG,GAAIwL,GAAcjG,SAAY9F,IAAUgM,EAAAA,EAAAA,KAAiBhM,EAAQC,EAAUG,EAAOoL,eAWvF,YAVAtG,EAAQ6F,wBAAwB,CAC9B/K,SACA2K,OACA1K,WACAwL,aACAb,oBACAC,uBACAC,oBACAvK,SAIN,CAOA,MAAM4E,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQuL,GAC1BM,GAAaC,EAAAA,EAAAA,KAAiB9L,EAAQuL,EAAeC,GACrDrH,GAASC,EAAAA,EAAAA,KAAapE,EAAQuL,EAAeC,GACnD,IAAKzG,EAAM,OAIX,GAFAhF,EAAgCC,EAAQuL,EAAeC,EAAiBrL,GAEpEP,GACCiM,GAAYhM,WACXwL,GAAelH,GAAQ4H,WAAWtH,QAAUN,EAAO4H,UAAU7B,SAAS8B,OAAOH,EAAWhM,YAe5F,OAdAG,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkM,mBAAe7K,GACdlB,IACHyE,EAAAA,EAAAA,IAAU5E,QACV8E,EAAQ6F,wBAAwB,CAC9B/K,SACA2K,OACA1K,SAAUgM,EAAWhM,SACrBwL,aACAb,oBACAC,uBACAC,oBACAvK,UAKJ,IAAI,cAAE+L,IAAkBC,EAAAA,EAAAA,KAAenM,EAAQG,GAC3C+L,GACFvM,EAAkBuM,EAAcX,cAAeW,EAAcE,kBAG/DpM,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkM,cAAe,CACbX,gBACAa,iBAAkBJ,OAAOR,KAE1BrL,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV,MAAMqM,EAAmBA,KAEvB,MAAMC,GAAgB3K,EAAAA,EAAAA,MAClB0J,IACC/K,EAAAA,EAAAA,KAAyBgM,EAAenM,IAAQP,SAAW2L,IAC3DjL,EAAAA,EAAAA,KAAyBgM,EAAenM,IAAQN,WAAa2L,GAGlE1G,EAAQuH,iBAAiB,CAAElM,SAAQ,EAGhCkL,GACHvG,EAAQ6F,wBAAwB,CAC9B/K,SACA2K,OACA1K,SAAUA,EACVM,QACAkL,aACAb,oBACAC,uBACAC,sBAIJ,MAAMlI,QAAe1C,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDiF,MAAM2D,EAAAA,EAAAA,KAAW1I,EAAQuL,GACzBlE,UAAW2E,OAAOR,KAKpB,GAFAxL,GAAS2B,EAAAA,EAAAA,MACTuK,GAAgBC,EAAAA,EAAAA,KAAenM,EAAQG,GAAO+L,cAC1CA,GAAeX,gBAAkBA,GAAiBW,GAAeE,mBAAqBZ,EAA1F,CAKA,IAAKhJ,EAYH,OAXAxC,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkM,mBAAe7K,GACdlB,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0BmE,EAAa,qBAAuB,yBACvElL,eAGFkM,IAIFxM,IAAAA,EAAa2C,EAAO3C,UACpBD,IAAAA,EAAW4C,EAAO5C,QAEbA,GAKLI,GAAS2B,EAAAA,EAAAA,MACT3B,GAASuM,EAAAA,EAAAA,KAAYvM,EAAQwC,EAAOmB,UAChC0H,IACFrL,GAASwM,EAAAA,EAAAA,KAAiBxM,EAAQuL,EAAeC,EAAiB,CAChE3L,aAGFG,GAASwM,EAAAA,EAAAA,KAAiBxM,EAAQJ,EAAQC,EAAU,CAClD4M,gBAAgB,EAChB5M,WACAD,SACA8M,cAAenB,EACfoB,cAAenB,KACXK,IACCe,EAAAA,EAAAA,IAAKf,EAAY,CAAC,gBAAiB,gBAAiB,yBAA0B,wBAGvF7L,GAAS6M,EAAAA,EAAAA,KAAa7M,EAAQJ,EAAQC,EAAU,CAC9CiN,eAAgBtK,EAAOsK,kBAEzBlI,EAAAA,EAAAA,IAAU5E,GAENsL,GACFxG,EAAQmD,aAAa,CACnBrI,SACAC,SAAUA,EACVwH,UAAWiE,EACXnL,UAIJ2E,EAAQuF,qBAAqB,CAC3BzK,SACAC,WACAM,QACA4M,QAASA,KACP/M,GAAS2B,EAAAA,EAAAA,MACT3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkM,mBAAe7K,GACdlB,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,2BACnC/G,SACA,EAEJ6M,SAAUA,KACRhN,GAAS2B,EAAAA,EAAAA,MACTuK,GAAgBC,EAAAA,EAAAA,KAAenM,EAAQG,GAAO+L,cAC1CA,GAAeX,gBAAkBA,GAAiBW,GAAeE,mBAAqBZ,IAI1FxL,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkM,mBAAe7K,GACdlB,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQ6F,wBAAwB,CAC9B/K,SACA2K,OACA1K,SAAUA,EACVM,QACAkL,aACAb,oBACAC,uBACAC,sBACA,KAxEJ2B,GArBF,MAFEA,GAiGA,KAGJjD,EAAAA,EAAAA,IAAiB,kBAAkB9H,MAAOtB,EAAQ8E,EAASwF,KACzD,MAAM,GAAErJ,EAAE,MAAEd,GAAQC,EAAAA,EAAAA,OAAsBkK,EACpCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAChC,IAAK8D,EACH,OAGF,MAAMkI,QAAqBnN,EAAAA,EAAAA,IAAQ,gBAAiBiF,GAEhDkI,GAAcjI,UAAUkI,cAC1BpI,EAAQqE,SAAS,CAAElI,GAAIgM,EAAajI,SAASkI,aAAc/M,SAC7D,KAGFiJ,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EAC5CvF,GAAOoI,EAAAA,EAAAA,KAAkBnN,GAC/B,GAAI+E,EAEF,YADAD,EAAQqE,SAAS,CAAElI,GAAI8D,EAAK9D,GAAIwJ,sBAAsB,EAAMtK,UAI9D2E,EAAQqE,SAAS,CAAElI,GAAI2J,EAAAA,IAAaH,sBAAsB,EAAMtK,UAEhE,MAAMqC,QAAe1C,EAAAA,EAAAA,IAAQ,YAAa,CAAEyK,KAAM,YAC9C/H,GACFsC,EAAQqE,SAAS,CAAElI,GAAIuB,EAAO5C,OAAQ6K,sBAAsB,EAAMtK,SACpE,KAGFiJ,EAAAA,EAAAA,IAAiB,gBAAgB9H,MAAOtB,EAAQ8E,EAASwF,KACvD,MAAM,mBAAE8C,GAAuB9C,EACzB9I,EAAW8I,EAAQ9I,SACzB,IAAI6L,GAAkB,EAClB/D,EAAI,EAER,MAAQtJ,EAAOgD,MAAM2B,cAAcnD,IAAW,CAC5C,GAAI8H,KA5XqB,IAkYvB,YALIgE,EAAAA,KAEFC,QAAQ1E,MAAM,mDAQlB,GAA+B,0BAF/B7I,GAAS2B,EAAAA,EAAAA,OAEE6L,iBAAmE,4BAArBxN,EAAOyN,UAC9D,aAGIlM,EACJC,GACA,GAGG6L,UACGD,OACNC,GAAkB,GAGpBrN,GAAS2B,EAAAA,EAAAA,KACX,MAGFyH,EAAAA,EAAAA,IAAiB,gBAAgB,CAACpJ,EAAQ8E,EAASwF,KACjD,MAAM,OACJ1K,EAAM,MAAE8N,EAAK,WAAEC,GACbrD,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAM6I,EAAWtM,gBACTuD,EAAa7E,EAAQ8E,EAASC,GAChC4I,GACF7I,EAAQ+I,sBAAsB,CAAEC,OAAQlO,EAAQmO,uBAAuB,GACzE,EAGEL,EACGE,IAELnO,EAA4BmO,EAC9B,KAGFxE,EAAAA,EAAAA,IAAiB,gBAAgB,KAC/B9J,GAA4B,KAC1BiC,EAAU,cAAUF,GAAW,GAC/BE,EAAU,gBAAYF,GAAW,EAAK,GACtC,KAGJ+H,EAAAA,EAAAA,IAAiB,qBAAqB,CAACpJ,EAAQ8E,EAASwF,KACtD,MAAM,OAAE1K,GAAW0K,EACbvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,IAIAjF,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCiF,UACInF,IAAWoO,EAAAA,KAAiC,CAC9CC,kBAAkBpM,EAAAA,EAAAA,KAA8B7B,IAASiH,UAE3D,KAGJmC,EAAAA,EAAAA,IAAiB,4BAA4B9H,MAAOtB,EAAQ8E,EAASwF,KACnE,MAAM,OAAE1K,GAAW0K,EACbvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAMvC,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CiF,OACAmJ,eAAe,EACfzL,MAAO,IAGJD,IAELxC,GAAS2B,EAAAA,EAAAA,MAET3B,GAASuM,EAAAA,EAAAA,KAAYvM,EAAQwC,EAAOmB,UAEhCnB,EAAOmB,SAASc,QAClBzE,GAASmO,EAAAA,EAAAA,KAAwBnO,EAAQJ,EAAQ4C,EAAOmB,SAAS,GAAG1C,GAAI,SACxEjB,GAASuD,EAAAA,EAAAA,KAAevD,EAAQ,QAAS,CAACJ,KAE1CgF,EAAAA,EAAAA,IAAU5E,KAEVA,GAASoO,EAAAA,EAAAA,KAAwBpO,EAAQJ,EAAQ,UAEjDgF,EAAAA,EAAAA,IAAU5E,GAEVW,OAAOC,OAAOZ,EAAOa,SAASoD,SAAQ,EAAGhD,GAAId,MAC3C,MAAME,GAAqBC,EAAAA,EAAAA,KAAyBN,EAAQG,GAC5D,IAAKE,EAAoB,OACzB,MAAQT,OAAQyO,EAAS,SAAExO,GAAaQ,GAEpC6K,EAAAA,EAAAA,KAAqBlL,EAAQqO,IAAcxO,IAAaD,GAC1DkF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,SACpC,KAEJ,KAGFiJ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACpJ,EAAQ8E,EAASwF,KACzD,MAAM,OAAE1K,EAAM,UAAE0O,EAAY,GAAMhE,EAC5BvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAMwJ,EAAUjE,EAAQiE,SAAWD,EAAY,EAE/CtO,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQJ,EAAQ,CAAE2O,aACtC3J,EAAAA,EAAAA,IAAU5E,IACLF,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEiF,OAAMwJ,UAASD,aAAY,KAGpElF,EAAAA,EAAAA,IAAiB,yBAAyB,CAACpJ,EAAQ8E,EAASwF,KAC1D,MAAM,OAAE1K,EAAM,QAAEmI,EAAO,UAAEuG,EAAY,GAAMhE,EACrCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAMwJ,EAAUjE,EAAQiE,SAAWD,EAAY,EAE/CtO,GAASwO,EAAAA,EAAAA,KAAYxO,EAAQJ,EAAQmI,EAAS,CAAEwG,aAChD3J,EAAAA,EAAAA,IAAU5E,IACLF,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCiF,OAAMgD,UAASwG,UAASD,aACxB,KAGJlF,EAAAA,EAAAA,IAAiB,iBAAiB9H,MAAOtB,EAAQ8E,EAASwF,KACxD,MAAM,MACJmE,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAEzO,GAAQC,EAAAA,EAAAA,OACtCkK,EAEEpH,EAAS0L,EACZlF,KAAKzI,IAAO4F,EAAAA,EAAAA,KAAW7G,EAAQiB,KAC/B0I,OAAOC,SASV,IAAIiF,EACAC,EARJ9O,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhC/O,IACHyE,EAAAA,EAAAA,IAAU5E,GAIV,IACE,MAAMwC,QAAe1C,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE2O,QAAOC,QAAOxL,UAC9D2L,EAAiBrM,GAAQ2M,QACzBL,EAAsBtM,GAAQ4M,YAChC,CAAE,MAAOvG,GACP7I,GAAS2B,EAAAA,EAAAA,MAET3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,CACZC,SAAUC,EAAAA,GAAqBI,QAEhClP,IAEHyE,EAAAA,EAAAA,IAAU5E,GAE0B,sBAA/B6I,EAAmB5B,QACtBnC,EAAQgE,sBAAsB,CAAErG,MAAO,WAAYtC,UAEnD2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAE9E,CAEA,IAAK0O,EACH,OAGF,MAAQ5N,GAAIqO,EAAS,WAAErJ,GAAe4I,EAEtC7O,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQsP,EAAWT,GACvC7O,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,KACT5C,EAAAA,EAAAA,KAAenM,EAAQG,GAAO4O,aACjCC,SAAUH,EAAiBI,EAAAA,GAAqBM,SAAWN,EAAAA,GAAqBI,QAEjFlP,IACHyE,EAAAA,EAAAA,IAAU5E,GACV8E,EAAQqE,SAAS,CAAElI,GAAIqO,EAAW7E,sBAAsB,EAAMtK,UAE1D2O,IACF9O,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwP,EAAAA,EAAAA,KAA0BxP,EAAQsP,EAAWR,EAAqB3O,IAC3EyE,EAAAA,EAAAA,IAAU5E,IAGRsP,GAAarJ,GAAc0I,SACvB7O,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEF,OAAQ0P,EAAWrJ,aAAY0I,SAClE,KAGFvF,EAAAA,EAAAA,IAAiB,eAAe9H,MAAOtB,EAAQ8E,EAASwF,KACtD,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EACxCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAQ9D,GAAIqO,EAAS,WAAErJ,GAAelB,EAEtC,GAAMuK,GAAarJ,EAInB,UACQnG,EAAAA,EAAAA,IAAQ,cAAe,CAAEwP,YAAWrJ,cAC5C,CAAE,MAAO4C,GAC6B,sBAA/BA,EAAmB5B,QACtBnC,EAAQgE,sBAAsB,CAAErG,MAAO,WAAYtC,UAEnD2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAE9E,MAGFiJ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACpJ,EAAQ8E,EAASwF,KACnD,MAAM,OACJ1K,EAAM,OAAE6P,EAAM,oBAAEC,EAAmB,MAAEvP,GAAQC,EAAAA,EAAAA,OAC3CkK,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1B8G,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQyP,GAC3B1K,GAAS2B,IAId1G,GAAS2P,EAAAA,EAAAA,KAAU3P,EAAQJ,IAC3BgF,EAAAA,EAAAA,IAAU5E,IAENM,EAAAA,EAAAA,KAAyBN,EAAQG,IAAQP,SAAWA,GACtDkF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,WAG/BL,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEiF,OAAM2B,OAAMgJ,wBAAsB,KAGrEtG,EAAAA,EAAAA,IAAiB,cAAc,CAACpJ,EAAQ8E,EAASwF,KAC/C,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EACxCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,IAIL/E,GAAS2P,EAAAA,EAAAA,KAAU3P,EAAQJ,IAC3BgF,EAAAA,EAAAA,IAAU5E,IAENM,EAAAA,EAAAA,KAAyBN,EAAQG,IAAQP,SAAWA,GACtDkF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,WAG/BL,EAAAA,EAAAA,IAAQ,aAAc,CAAEF,OAAQmF,EAAK9D,KAAK,KAGjDmI,EAAAA,EAAAA,IAAiB,gBAAgB9H,MAAOtB,EAAQ8E,EAASwF,KACvD,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EACxCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF/E,GAAS2P,EAAAA,EAAAA,KAAU3P,EAAQJ,IAC3BgF,EAAAA,EAAAA,IAAU5E,IAENM,EAAAA,EAAAA,KAAyBN,EAAQG,IAAQP,SAAWA,GACtDkF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,UAGpC,MAAQc,GAAIqO,EAAS,WAAErJ,GAAelB,EACtC,GAAIuK,GAAarJ,EAAY,OACrBnG,EAAAA,EAAAA,IAAQ,eAAgB,CAAEwP,YAAWrJ,eAC3CjG,GAAS2B,EAAAA,EAAAA,MACT,MAAMiO,GAAeC,EAAAA,EAAAA,KAAmB7P,EAAQJ,GAC1CkQ,EAAkBnP,OAAOoD,KAAK6L,GAAclG,IAAIsC,QAAQrC,OAAOoG,EAAAA,IACrE/P,GAASgQ,EAAAA,EAAAA,KAAmBhQ,EAAQJ,EAAQkQ,IAC5ClL,EAAAA,EAAAA,IAAU5E,EACZ,MAGFoJ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACpJ,EAAQ8E,EAASwF,KAClD,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EACxCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF/E,GAAS2P,EAAAA,EAAAA,KAAU3P,EAAQJ,IAC3BgF,EAAAA,EAAAA,IAAU5E,IAENM,EAAAA,EAAAA,KAAyBN,EAAQG,IAAQP,SAAWA,GACtDkF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,UAGpC,MAAQc,GAAIqO,EAAS,WAAErJ,GAAelB,EAClCuK,GAAarJ,IACVnG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEwP,YAAWrJ,cAC7C,KAGFmD,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,MACJmE,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAExO,GAAQC,EAAAA,EAAAA,OAC/BkK,EACEpH,EAAS0L,EACZlF,KAAKzI,IAAO4F,EAAAA,EAAAA,KAAW7G,EAAQiB,KAC/B0I,OAAOC,SAEV5J,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhC/O,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV,IACE,MAAQ+E,KAAMkL,EAAW,aAAEb,SAAuBtP,EAAAA,EAAAA,IAAQ,kBAAmB,CAC3E2O,QACAvL,WACI,CAAC,EAEP,IAAK+M,EACH,OAGF,MAAQhP,GAAIrB,GAAWqQ,EAEvBjQ,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQJ,EAAQqQ,GACpCjQ,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,KACT5C,EAAAA,EAAAA,KAAenM,EAAQG,GAAO4O,aACjCC,SAAUiB,EAAchB,EAAAA,GAAqBM,SAAWN,EAAAA,GAAqBI,QAE9ElP,IACHyE,EAAAA,EAAAA,IAAU5E,GACV8E,EAAQqE,SAAS,CACflI,GAAIrB,EACJ6K,sBAAsB,EACtBtK,UAGEiP,IACFpP,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwP,EAAAA,EAAAA,KAA0BxP,EAAQJ,EAAQwP,EAAcjP,IACjEyE,EAAAA,EAAAA,IAAU5E,IAGRJ,GAAU+O,SACN7O,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BF,SACA+O,SAGN,CAAE,MAAOuB,GAC2B,kBAA7BA,EAAiBjJ,UACpBjH,GAAS2B,EAAAA,EAAAA,MACT3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B+O,aAAc,KACT5C,EAAAA,EAAAA,KAAenM,EAAQG,GAAO4O,aACjCC,SAAUC,EAAAA,GAAqBI,MAC/BxG,MAAO,qBAER1I,IACHyE,EAAAA,EAAAA,IAAU5E,GAEd,MAGFoJ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACpJ,EAAQ8E,EAASwF,KACrD,MAAM,GAAErJ,EAAE,SAAEkP,EAAQ,MAAEhQ,GAAQC,EAAAA,EAAAA,OAAsBkK,EAC9CvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAChC,IAAK8D,EACH,OAGF,MAAMtC,GAAQ2N,EAAAA,EAAAA,GAAmBpQ,EAAQ,sBAEzC,GAAImQ,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQmQ,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkBC,EAAAA,EAAAA,KAAmBxQ,EAAQiB,EAAIkP,IAEjD,cAAEM,EAAa,gBAAEC,GAAoBL,EACrCM,EAAeJ,EACjB,CAACtP,KAAQwP,GAAiB,KACzBA,GAAiB,IAAI9G,QAAQiH,GAAaA,IAAa3P,IAGtD4P,EAAqB,CAAC5P,KAAOyP,IAE9B5Q,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BmB,GAAIkP,EACJW,aAAc,IACTT,EACHI,cAAeE,EACfD,gBAAiBG,IAGvB,CACF,KAAO,CACL,MAAMrP,GAAWuP,EAAAA,EAAAA,KAAmB/Q,EAAQiB,GACtC+P,GAAWR,EAAAA,EAAAA,KAAmBxQ,EAAQiB,EAAiB,aAAbO,EAA0ByP,EAAAA,SAAqB5P,GAEzF6P,EAAMlR,EAAOgD,MAAMmO,iBAA8B,aAAb3P,EAA0B,WAAa,UACjF,IAAK0P,GAAKzM,QAAU,IAAMhC,IAAUuO,EAKlC,YAJAlM,EAAQgE,sBAAsB,CAC5BrG,MAAO,qBACPtC,WAICL,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiF,OAAMwL,gBAAiBS,GAC5D,MAGF5H,EAAAA,EAAAA,IAAiB,sBAAsB,CAACpJ,EAAQ8E,EAASwF,KACvD,MAAM,GAAErJ,GAAOqJ,EACTvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAC5B8D,IACGjF,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCiF,OACAoL,UAAUiB,EAAAA,EAAAA,KAAerM,GAAQ,EAAIkM,EAAAA,KAEzC,KAGF7H,EAAAA,EAAAA,IAAiB,2BAA2B,CAACpJ,EAAQ8E,EAASwF,KAC5D,MAAM,GAAErJ,EAAE,MAAEd,GAAQC,EAAAA,EAAAA,OAAsBkK,EACpCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAChC,IAAK8D,EACH,OAGF,MAAMtC,GAAQ2N,EAAAA,EAAAA,GAAmBpQ,EAAQ,sBAEnCgR,GAAWR,EAAAA,EAAAA,KAAmBxQ,EAAQiB,EAAIoQ,EAAAA,KAE1CH,EAAMlR,EAAOgD,MAAMmO,iBAAiBG,OACrCJ,GAAKzM,QAAU,IAAMhC,IAAUuO,EAClClM,EAAQgE,sBAAsB,CAC5BrG,MAAO,qBACPtC,WAICL,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEiF,OAAMwL,gBAAiBS,GAAW,KAG9E5H,EAAAA,EAAAA,IAAiB,mBAAmB9H,UAClC,MAAMiQ,QAAoBzR,EAAAA,EAAAA,IAAQ,oBAE9ByR,IACFvR,GAAS2B,EAAAA,EAAAA,MAET3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,eACPA,KAGP3M,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,8BAA8B9H,UAC7C,MAAMkQ,QAA+B1R,EAAAA,EAAAA,IAAQ,+BAEzC0R,IACFxR,GAAS2B,EAAAA,EAAAA,MAET3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACVE,YAAaD,KAGjB5M,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACpJ,EAAQ8E,EAASwF,KACpD,MAAM,OACJ1K,EAAM,YAAE8R,EAAW,SAAEC,EAAQ,MAAExR,GAAQC,EAAAA,EAAAA,OACrCkK,EACE7H,GAAQ2N,EAAAA,EAAAA,GAAmBpQ,EAAQ,sBAElB2R,EACpBC,MAAM3Q,IAAOqP,EAAAA,EAAAA,KAAiBtQ,EAAQiB,GAAKyP,gBAAgBjM,QAAUhC,IAEtEqC,EAAQgE,sBAAsB,CAAErG,MAAO,qBAAsBtC,WAI/DuR,EAAYzN,SAAQ3C,UAClB,MAAM+O,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQiB,GACpCoP,SACIvQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BmB,KACA6P,aAAc,IACTT,EACHI,cAAeJ,EAAOI,eAAe9G,QAAQiH,GAAaA,IAAahR,IACvE8Q,gBAAiBL,EAAOK,gBAAgB/G,QAAQkI,GAAeA,IAAejS,MAGpF,IAGF+R,EAAS1N,SAAQ3C,UACf,MAAM+O,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQiB,GACpCoP,SACIvQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BmB,KACA6P,aAAc,IACTT,EACHK,gBAAiBL,EAAOK,gBAAgBoB,OAAOlS,KAGrD,IACA,KAGJwJ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACpJ,EAAQ8E,EAASwF,KACnD,MAAM,GAAErJ,EAAE,aAAE6P,GAAiBxG,EACvB+F,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQiB,GAEpCoP,IACGvQ,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7BmB,KACA6P,aAAc,CACZ7P,KACA8Q,SAAU1B,EAAO0B,SACjBtB,cAAeJ,EAAOI,iBACnBK,IAGT,KAGF1H,EAAAA,EAAAA,IAAiB,iBAAiB9H,MAAOtB,EAAQ8E,EAASwF,KACxD,MAAM,OAAE+F,EAAM,MAAElQ,GAAQC,EAAAA,EAAAA,OAAsBkK,GACxC,WAAE0H,EAAU,KAAEC,GAASjS,EAAOuR,YAE9B9O,GAAQ2N,EAAAA,EAAAA,GAAmBpQ,EAAQ,iBACzC,GAAIW,OAAOoD,KAAKkO,GAAMxN,QAAUhC,EAK9B,YAJAqC,EAAQgE,sBAAsB,CAC5BrG,MAAO,gBACPtC,UAKJ,MAAM+R,EAAQC,KAAKC,OAAQJ,GAAc,GAAKf,EAAAA,MAGtChQ,GAAIoR,EAAa,YAAEC,KAAgBC,GAAclC,EAEnDmC,EAAQN,EAAQ,EAChBpB,EAAe,CACnB7P,GAAIuR,KACDD,GAsBL,SApBMzS,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9BmB,GAAIuR,EACJ1B,iBAIFhM,EAAQ2N,UAAU,CAChB,QAAS,mBACTxR,GAAIuR,EACJnC,OAAQS,IAGVhM,EAAQ4N,0BAA0B,CAChCC,cAAe,CACbpI,KAAM,cACND,QAAS4H,EAAQ,GAEnB/R,WAGGmS,EACH,OAGFtS,GAAS2B,EAAAA,EAAAA,MACT,MAAM,YAAE8P,GAAgBzR,EAAOuR,YAE3BE,IACFzR,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACVE,YAAaA,EAAY9H,QAAO,EAAG1I,QAASA,IAAOoR,OAGvDzN,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,UAAEsI,GAActI,QAEDxK,EAAAA,EAAAA,IAAQ,kBAAmB8S,KAE9C5S,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACVS,WAAYY,KAGhBhO,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,GAAErJ,GAAOqJ,GACAgG,EAAAA,EAAAA,KAAiBtQ,EAAQiB,UAGhCnB,EAAAA,EAAAA,IAAQ,mBAAoBmB,EACpC,KAGFmI,EAAAA,EAAAA,IAAiB,oBAAoB,CAACpJ,EAAQ8E,EAASwF,KACrD,MAAM,GAAErJ,GAAOqJ,EACTvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAC5B8D,IACEA,EAAK8N,aACF/S,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEiF,OAAMlF,SAAUwE,EAAAA,MAEjDvE,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCiF,OACA8F,eAAgB9F,EAAK8F,gBAG3B,KAGFzB,EAAAA,EAAAA,IAAiB,iBAAiB,CAACpJ,EAAQ8E,EAASwF,KAClD,MAAM,OAAE1K,EAAM,QAAEmI,GAAYuC,EACtBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,OAEX,MAAM6C,GAAQkL,EAAAA,EAAAA,KAAY9S,EAAQJ,EAAQmI,GAEpCgL,EAAqBnL,GAAOoL,cAC7BD,KAEAjT,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCiF,OACAlF,SAAUkI,EACVmK,MAAOa,IAGT/S,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwO,EAAAA,EAAAA,KAAYxO,EAAQJ,EAAQmI,EAAS,CAC5C8K,YAAa,IAEf7S,GAASwM,EAAAA,EAAAA,KAAiBxM,EAAQJ,EAAQmI,EAAS,CACjDkL,uBAAwBF,KAE1BnO,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,KAAE4I,EAAI,MAAE/S,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEtC9H,QAAe1C,EAAAA,EAAAA,IAAQ,kBAAmBoT,GAChD,GAAK1Q,EAAL,CAUA,GANAxC,GAAS2B,EAAAA,EAAAA,MAELa,EAAOU,QACTlD,GAASmT,EAAAA,EAAAA,KAASnT,GAAQ+C,EAAAA,EAAAA,IAAqBP,EAAOU,MAAO,QAG3DV,EAAOuC,KAIT,OAHA/E,GAASoT,EAAAA,EAAAA,KAASpT,GAAQ+C,EAAAA,EAAAA,IAAqB,CAACP,EAAOuC,MAAO,QAC9DH,EAAAA,EAAAA,IAAU5E,QACV8E,EAAQqE,SAAS,CAAElI,GAAIuB,EAAOuC,KAAK9D,GAAId,UAIzC,GAAIqC,EAAO6Q,OAAOC,mBAYhB,OAXAtT,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BuT,aAAc,CACZC,aAAc,CACZjJ,KAAM,yBACN2I,QAEFO,iBAAkBjR,EAAO6Q,OACzBK,OAAQ,YAETvT,QACHyE,EAAAA,EAAAA,IAAU5E,GAIZA,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9B2T,gBAAiB,CACfT,OACAU,WAAYpR,EAAO6Q,SAEpBlT,IACHyE,EAAAA,EAAAA,IAAU5E,EApCV,CAoCiB,KAGnBoJ,EAAAA,EAAAA,IAAiB,yBAAyB9H,MAAOtB,EAAQ8E,EAASwF,KAChE,MAAM,YACJuJ,EAAW,YAAEtM,EAAW,OAAEC,EAAM,KAAEC,EAAI,MAAEtH,GAAQC,EAAAA,EAAAA,OAC9CkK,EAGJxF,EAAQqE,SAAS,CAAElI,GAAI2J,EAAAA,IAAazK,UAEpC,MAAM4E,QA+xDDzD,eAA6DtB,EAAW6T,GAC7E7T,GAAS2B,EAAAA,EAAAA,MACT,MAAMmS,GAAYC,EAAAA,EAAAA,KAAwB/T,EAAQ6T,GAClD,GAAIC,IAAcA,EAAUrN,MAC1B,OAAOiC,EAAAA,EAAAA,KAAW1I,EAAQ8T,EAAU7S,IAGtC,MAAM,KAAE8D,EAAI,KAAE2B,SAAe5G,EAAAA,EAAAA,IAAQ,uBAAwB+T,IAAgB,CAAC,EAC9E,OAAK9O,GAIL/E,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI8D,GAEjC2B,IACF1G,GAAS2G,EAAAA,EAAAA,KAAW3G,EAAQ0G,EAAKzF,GAAIyF,KAEvC9B,EAAAA,EAAAA,IAAU5E,GAEH+E,QAZP,CAaF,CApzDqBiP,CAAuBhU,EAAQ6T,GAClD,IAAK9O,EAMH,OALAD,EAAQuH,iBAAiB,CAAElM,eAC3B2E,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,mCAAmC+M,QAAQ,UAAWJ,GACzF1T,UAKAsH,EACF3C,EAAQwD,kBAAkB,CAAE1I,OAAQmF,EAAK9D,GAAIwG,KAAM,CAAEA,QAAQtH,UAE7D2E,EAAQqE,SAAS,CAAElI,GAAI8D,EAAK9D,GAAId,UAG9BqH,GAEFa,EADArI,GAAS2B,EAAAA,EAAAA,MACsBmD,EAASC,EAAK9D,GAAIuG,EAAQD,EAAapH,EACxE,KAGFiJ,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,IACJ4J,EAAG,kBACHC,EAAiB,MACjBhU,GAAQC,EAAAA,EAAAA,OACNkK,GAEE,sBACJ8J,EAAqB,gBACrBC,EAAe,eACfC,EAAc,kBACdhM,EAAiB,oBACjBiM,EAAmB,YACnBC,EAAW,oBACXC,EACAC,mBAAoBC,EAAwB,0BAC5CC,EAAyB,cACzBC,GACE/P,EAEJ,IAAIgQ,EAAAA,EAAAA,IAAWZ,MACOa,EAAAA,EAAAA,GAAgBb,IACjBA,EAAIc,MAAMC,EAAAA,MAC3B,OAIJ,MAAMC,EAAM,IAAIC,IAAIjB,EAAIkB,cAAcC,WAAW,QAAUnB,EAAO,WAAUA,KAC5E,GAAIoB,EAAAA,IAAgBnL,IAAI+K,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADAC,OAAOC,KAAKR,EAAIS,WAAY,SAAU,YAIxC,MACMC,GADWN,EAAAA,IAAgBnL,IAAI+K,EAAIK,UAAY,OAASL,EAAIK,UACvCM,MAAM,KACjC,GAAID,EAAUnR,OAAS,EAAG,OAE1B,MAAMqR,EAAkBZ,EAAIM,SAASvB,QAAQ,UAAW,IAClDuB,EAAgC,IAArBI,EAAUnR,OAAgB,GAAEmR,EAAU,MAAME,IAAoBA,GAC1EC,EAAOC,EAAOC,GAAST,EAASK,MAAM,KAAKlM,OAAOC,SAASF,KAAKwM,GAASC,UAAUD,KACpFpU,EAASnB,OAAOyV,YAAYlB,EAAImB,cAEtC,IAAInD,EACU,aAAV6C,IACF7C,EAAO8C,GAGT,MAAMM,EAAoB,MAAVN,IAAkBhK,OAAOiK,SAAU5U,GAEnD,GAAI0U,EAAMf,MAAM,qBAQd,YAPAZ,EAAsB,CACpBP,YAAakC,EAAMQ,OAAO,EAAGR,EAAMtR,OAAS,GAC5C8C,YAAazF,EAAO0U,YACpBhP,OAAQ1F,EAAO0F,OACfC,KAAM3F,EAAO2F,KACbtH,UAKJ,GAAImW,EAOF,YANA1B,EAA0B,CACxBvO,SAAU0P,EACVO,UACAnW,UAUJ,IAJI4V,EAAMV,WAAW,MAAQU,EAAMV,WAAW,QAC5CnC,EAAO6C,EAAMQ,OAAO,EAAGR,EAAMtR,OAAS,IAGpCyO,EAEF,YADAmB,EAAgB,CAAEnB,OAAM/S,UAI1B,GAAc,gBAAV4V,GAAqC,aAAVA,EAQ7B,YAPAzB,EAAe,CACbtO,eAAgB,CACdyQ,UAAWT,GAEb7B,oBACAhU,UAKJ,GAAc,UAAV4V,EAGF,YADAzN,EAAkB,CAAEb,MADPiP,EAAAA,EAAAA,GAAgB5U,EAAOoS,IAAKpS,EAAO2F,MACtBtH,UAI5B,GAAc,YAAV4V,EAGF,YADAtB,EAAoB,CAAEkC,KADTX,EACe7V,UAI9B,GAAc,aAAV4V,EAGF,YADAlB,EAAc,CAAE8B,KADHX,EACS7V,UAIxB,MAAMyW,EAAsBZ,QAAS3U,EAC/BgG,EAAY4O,EAAQjK,OAAOiK,QAAS5U,EACpCwV,EAAY/U,EAAOgV,QAAU9K,OAAOlK,EAAOgV,cAAWzV,EAEtD0V,QA0oDDzV,eACLtB,EAAWgX,EAAiBC,GAE5B,IAAKD,IAAYC,EAAS,OAAO,EACjCjX,GAAS2B,EAAAA,EAAAA,MACT,MAAMuV,QAAuB9Q,EAAoBpG,EAAQgX,GACzDhX,GAAS2B,EAAAA,EAAAA,MACT,MAAMoF,EAAMmQ,IAAkBrQ,EAAAA,EAAAA,KAAW7G,EAAQkX,EAAejW,IAC1DkW,EAASpQ,SAAajH,EAAAA,EAAAA,IAAQ,cAAe,CACjDiH,MACAkQ,YAEF,OAAOrN,QAAQuN,EACjB,CAvpDyBC,CAAkBpX,EAAQ+V,EAAOC,GAElDqB,EAAqBtB,IAAUC,GAAUhK,OAAOsL,UAAUtL,OAAOgK,KAAWe,EAE9EjV,EAAOyV,eAAe,cAAgBzV,EAAOyV,eAAe,cAC9DhD,EAAoB,CAClBlO,SAAU0P,EACVyB,WAAY1V,EAAO2V,WAAa3V,EAAO4V,WACvCvX,UAEO4V,EAAMV,WAAW,KAC1Bb,EAAY,CACVjK,KAAM,OACNoM,KAAMZ,EAAM4B,UAAU,GACtBxX,UAEiB,YAAV4V,EACTvB,EAAY,CACVjK,KAAM,OACNoM,KAAMX,EACN7V,UAEOkX,EACT1C,EAAyB,CACvBtO,SAAU0P,EACV1O,UAAWA,GAAa2E,OAAO4K,GAC/B/W,SAAUwH,EAAY2E,OAAO4K,QAAuBvV,EACpDwV,YACAvP,WAAYxF,EAAO8V,MACnBrQ,YAAazF,EAAO0U,YACpBhP,OAAQ1F,EAAO0F,OACfqQ,SAAU/V,EAAOgW,SACjBC,KAAMjW,EAAOiW,KACbC,cAAe,CAACjC,EAAOC,EAAOC,GAC9B9V,UAGF2E,EAAQmT,QAAQ,CACd/D,MAAKgE,iBAAiB,EAAM/X,QAAOgY,iBAAiB,GAExD,KAGF/O,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,EAASwF,KACjE,MAAM,aAAE8N,EAAY,UAAEC,EAAS,MAAElY,GAAQC,EAAAA,EAAAA,OAAsBkK,EAE/D,IAAIvF,EAEJ,GAAIsT,GAEF,GADAtT,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQoY,IACrBrT,EAEH,YADAD,EAAQkC,iBAAiB,CAAEC,QAAS,CAAEqR,IAAK,8BAAgCnY,eAK7E,GADA4E,QAAaqB,EAAoBpG,EAAQoY,IACpCrT,EAEH,YADAD,EAAQkC,iBAAiB,CAAEC,QAAS,CAAEqR,IAAK,mBAAqBnY,WAK/DoY,EAAAA,EAAAA,KAAcxT,KAAUyT,EAAAA,EAAAA,KAAiBzT,GAK9CD,EAAQ2T,eAAe,CACrB7Y,OAAQmF,EAAK9D,GACbd,UANA2E,EAAQqE,SAAS,CAAElI,GAAI8D,EAAK9D,GAAId,SAOhC,KAGJiJ,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,KAAE4I,EAAI,MAAE/S,GAAQC,EAAAA,EAAAA,OAAsBkK,EACtC9H,QAAe1C,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEoT,SAC9C1Q,GAILsC,EAAQqE,SAAS,CAAElI,GAAIuB,EAAOvB,GAAId,SAAQ,KAG5CiJ,EAAAA,EAAAA,IAAiB,sBAAsB9H,MAAOtB,EAAQ8E,EAASwF,KAC7D,MAAM,SACJjE,EAAQ,UAAEgB,EAAS,UAAEwP,EAAS,WAAEvP,EAAU,YAAEC,EAAW,OAAEC,EAAM,SAAE3H,EAAQ,cAAEmY,EAAa,SAAEH,EAAQ,KAAEE,EAAI,KACxGtQ,EAAI,cAAEiR,EAAa,OAAEC,EAAM,IAAEC,EAAG,UAAElR,EAAS,MAC3CvH,GAAQC,EAAAA,EAAAA,OACNkK,EAEEvF,GAAO8T,EAAAA,EAAAA,KAAkB7Y,EAAQG,GACjC2Y,EAAad,IAAgB,GAC7BjB,EAAW+B,IAAe9M,OAAO8M,KAAgBd,IAAgB,GAEvE,IAAKnB,EAAW,CACd,QAAoBxV,IAAhBkG,GAA6BF,IAAcC,IAAesR,GACzD7T,GAAMgU,WAAWnH,MAAMoH,GAAMA,EAAE3S,WAAaA,IAI/C,YAHAvB,EAAQmD,aAAa,CACnBrI,OAAQmF,EAAK9D,GAAIpB,WAAUwH,YAAWK,YAAWvH,UAKrD,QAAoBkB,IAAhBkG,GAA6BoR,EAO/B,YANA7T,EAAQmU,2BAA2B,CACjC5S,WACAsD,OAAQgP,EACRrR,WAAYC,GAAesQ,EAC3B1X,UAKJ,QAAiBkB,IAAbwW,IAA2BiB,EAAY,CACzC,MAAMI,GAAQC,EAAAA,EAAAA,KACRjC,QAAuB9Q,EAAoBpG,EAAQqG,GACzDrG,GAAS2B,EAAAA,EAAAA,MACT,MAAM+E,EAAOwQ,IAAkBrQ,EAAAA,EAAAA,KAAW7G,EAAQkX,EAAejW,IACjE,IAAKiW,IAAmBnS,IAAS2B,GAAM0S,eAAgB,OASvD,YARAtU,EAAQuU,mBAAmB,CACzBlR,MAAO+O,EAAejW,GACtB6M,OAAQ/I,EAAK9D,GACbiY,QACA5R,WAAYuQ,EACZE,OACA5X,SAGJ,CACA,IAAK4W,EAkBH,aA4jDNzV,eACEtB,EACA8E,EACAhD,MAWI3B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,SACJiG,EAAQ,SAAExG,EAAQ,cAAEyZ,EAAa,WAAEhS,EAAU,IAAEsR,EAAG,YAAErR,EAAW,OAAEC,EAAM,KAAEC,EAAI,UAAEC,GAC7E5F,EACEyX,GAAcV,EAAAA,EAAAA,KAAkB7Y,EAAQG,GAG9C,QAAoBkB,IAAhBkG,IAA8BC,EAAQ,CACxC,MAAMT,QAAYH,EAAqB5G,EAAQ8E,EAASuB,EAAUlG,GAElE,IAAK4G,EAAK,OASV,YAPAjC,EAAQ0D,cAAc,CACpBzB,MACAnH,OAAQ2Z,GAAatY,IAAM8F,EAAI9F,GAC/BqG,WAAYC,EACZpH,SAIJ,CAEA,MAAMiH,EAAgBmS,GAAaR,WAAWnH,MAAMoH,GAAMA,EAAE3S,WAAaA,IAEpEe,GAEHtC,EAAQqE,SAAS,CAAElI,GAAI2J,EAAAA,IAAazK,UAGtC,MAAMqZ,EAAuBxZ,EAAOyZ,WAAWD,qBAC/C,IAAIlT,EAAWsS,EACf,GAAItR,GAAckS,GAAsB/U,OAAQ,CAC9C,MAAMiV,EAASF,EAAqBvP,MAAM0P,GAAMrS,EAAW+N,WAAWsE,KAClED,IACFpT,EAAWgB,EAAWsS,MAAMF,EAAOjV,QAEvC,CAEA,MAAMM,QAAaqB,EAAoBpG,EAAQqG,EAAUC,GACpDvB,EASLoC,EAAmBnH,EAAQ8E,EAASC,EAAM,CACxCqC,gBACAvH,WACAwH,UAAWiS,EACXhS,aACAhB,WACAiB,cACAC,SACAC,OACAC,aACCvH,GAlBIiH,IACHtC,EAAQuH,iBAAiB,CAAElM,UAC3B2E,EAAQkC,iBAAiB,CAAEC,QAAS,sBAAuB9G,UAiBjE,CAvpDYuU,CACJ1U,EAAQ8E,EAAS,CACfuB,WACAxG,WACAyZ,cAAejS,EACfC,aACAsR,MACArR,cACAC,SACAC,OACAC,aACCvH,QAEDuY,GAEF5T,EAAQ4T,EAAcmB,QAAQnB,EAAcpO,SAIlD,CAEA,MAAMwP,GAAetT,EAAAA,EAAAA,KAAqBxG,EAAQqG,GAClD,GAAIwQ,GAAaxP,GAAayS,EAgB5B,OAfAhV,EAAQkD,WAAW,CACjBqD,YAAY,EACZI,gBAAiBqO,EAAa7Y,GAC9ByK,gBAAiBrE,EACjBlH,QACAmL,eAAgBuL,SAEdnP,GACF5C,EAAQyD,uBAAuB,CAC7B3I,OAAQka,EAAa7Y,GACrBoG,UAAWwP,EACXnP,YACAvH,WAMD4W,GAAUjS,EAAQqE,SAAS,CAAElI,GAAI2J,EAAAA,IAAazK,UAEnD,MAAM+W,QAAuB9Q,EAAoBpG,EAAQqG,GAEzD,GAAK6Q,EAEL,GAAIH,GAAYG,EAAhB,CACE,MAAMgC,GAAQC,EAAAA,EAAAA,KAEdrU,EAAQiV,kBAAkB,CACxB9C,QAAS6B,EACT3Q,MAAO+O,EAAejW,GACtBd,QACA0X,WACAE,OACAmB,SAGJ,MAEK7R,IAELvC,EAAQkD,WAAW,CACjBqD,YAAY,EACZI,gBAAiByL,EAAejW,GAChCyK,gBAAiBrE,EACjBlH,QACAmL,eAAgBuL,IAGdnP,GACF5C,EAAQyD,uBAAuB,CAC7B3I,OAAQsX,EAAejW,GACvBoG,UAAWwP,GAAaxP,EACxBK,YACAvH,UAIAuY,GAEF5T,EAAQ4T,EAAcmB,QAAQnB,EAAcpO,SAC9C,KAGFlB,EAAAA,EAAAA,IAAiB,sBAAsB,CAACpJ,EAAQ8E,EAASwF,KACvD,MAAM,GACJrJ,EAAE,UAAE4V,EAAS,UAAExP,EAAS,SAAExH,EAAQ,UAAE6H,EAAS,MAAEvH,GAAQC,EAAAA,EAAAA,OACrDkK,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiB,GAC3B8D,EAUA8R,GAAcxP,GAAcxH,GAK7B6H,GACF5C,EAAQyD,uBAAuB,CAC7B3I,OAAQqB,EACRoG,UAAWwP,GAAaxP,EACxBK,YACAvH,UAIA0W,GAAaxP,EACfvC,EAAQkD,WAAW,CACjBqD,YAAY,EACZI,gBAAiBxK,EACjByK,gBAAiBrE,EACjBlH,QACAmL,eAAgBuL,IAKpB1P,EAAmBnH,EAAQ8E,EAASC,EAAM,CACxCsC,YACAxH,WACA6H,aACCvH,IA5BD2E,EAAQqE,SAAS,CAAElI,KAAId,UAVvB2E,EAAQkC,iBAAiB,CACvBC,QAAS,CACPqR,IAAK,8BAEPnY,SAkCK,KAGXiJ,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,EAASwF,KACjE,MAAM,OACJ1K,EAAM,UAAEoa,EAAS,MACjB7Z,GAAQC,EAAAA,EAAAA,OACNkK,EAEEvF,QAAa0D,EAAmBzI,EAAQ8E,EAASlF,EAAQO,GAC1D4E,IAIL/E,GAAS2B,EAAAA,EAAAA,MACT3B,GAASia,EAAAA,EAAAA,KAAmBja,EAAQ+E,EAAK9D,GAAI,CAAEiZ,mBAAoBF,KACnEpV,EAAAA,EAAAA,IAAU5E,IAELF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiF,OAAMiV,cAAY,KAG7D5Q,EAAAA,EAAAA,IAAiB,iCAAiC,CAACpJ,EAAQ8E,EAASwF,KAClE,MAAM,OAAE1K,EAAM,aAAEua,GAAiB7P,EAC3BvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAE3BmF,IAIAjF,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEiF,OAAMoV,gBAAe,KAGvE/Q,EAAAA,EAAAA,IAAiB,gCAAgC9H,MAAOtB,EAAQ8E,EAASwF,KACvE,MAAM,OACJ1K,EAAM,OAAE6P,EAAM,aAAE0K,EAAY,MAC5Bha,GAAQC,EAAAA,EAAAA,OACNkK,EAEE5D,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQyP,GAEhC,IAAK/I,EACH,OAGF,MAAM3B,QAAa0D,EAAmBzI,EAAQ8E,EAASlF,EAAQO,GAE/D,IAAK4E,EAAM,aAELjF,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEiF,OAAM2B,OAAMyT,iBAE5Dna,GAAS2B,EAAAA,EAAAA,MAET,MAAMyY,GAAkBC,EAAAA,EAAAA,KAAmBra,EAAQ+E,EAAK9D,IACxD,IAAKmZ,EACH,OAGF,MAAM,QAAEE,EAAO,cAAEC,GAAkBH,EAE7BI,EAAW5Q,QAAQuQ,EAAaM,cAChCC,GAAe/Z,OAAOoD,KAAKoW,GAAc1V,OAE/CzE,GAASia,EAAAA,EAAAA,KAAmBja,EAAQ+E,EAAK9D,GAAI,IACvCqZ,GAAWE,GAAY,CACzBF,QAASA,EAAQ3Q,QAAQgR,GAAMA,EAAElL,SAAWA,QAE1C6K,IAAYE,GAAY,CAC1BF,QAASA,EAAQ5Q,KAAKiR,GACpBA,EAAElL,SAAWA,EACT,IAAKkL,EAAGR,gBACRQ,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAc5Q,QAAQgR,GAAMA,EAAElL,SAAWA,QAG5D7K,EAAAA,EAAAA,IAAU5E,EAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,OACJ1K,EAAM,OAAE6P,EAAM,YAAEmL,EAAW,YAAEC,EAAW,MACxC1a,GAAQC,EAAAA,EAAAA,OACNkK,EAEE5D,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQyP,GAChC,IAAK/I,EACH,OAGF,MAAM3B,QAAa0D,EAAmBzI,EAAQ8E,EAASlF,EAAQO,GAE/D,IAAK4E,EAAM,aAELjF,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/BiF,OAAM2B,OAAMkU,cAAaC,gBAG3B,MAAMC,QAAwBhb,EAAAA,EAAAA,IAAQ,gBAAiBiF,GACvD,IAAK+V,GAAiB9V,SACpB,OAGF,MAAM,iBAAE+V,GAAqBD,EAAgB9V,SACvCgW,GAAera,OAAOoD,KAAK6W,GAAanW,OAC9C,IAAIwW,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAACvL,GAASyL,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAACtL,GAAS,IACLsL,EAAiBtL,GACpBmL,cACAC,gBAMJI,IACFjb,GAAS2B,EAAAA,EAAAA,MACT3B,GAASia,EAAAA,EAAAA,KAAmBja,EAAQ+E,EAAK9D,GAAI,CAAE8Z,iBAAkBE,KACjErW,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,cAAc9H,MAAOtB,EAAQ8E,EAASwF,KACrD,MAAM,OACJ1K,EAAM,MAAE6O,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAExO,GAAQC,EAAAA,EAAAA,OACnCkK,EAEEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1BoF,GAAWqV,EAAAA,EAAAA,KAAmBra,EAAQJ,GACvCmF,IAIL/E,GAAS2B,EAAAA,EAAAA,MACT3B,GAASob,EAAAA,EAAAA,KAAyBpb,EAAQqb,EAAAA,GAAmBnM,WAAY/O,IACzEyE,EAAAA,EAAAA,IAAU5E,SAEJsb,QAAQC,IAAI,CAChBxW,EAAK0J,QAAUA,GACX3O,EAAAA,EAAAA,IAAQ,kBAAmBiF,EAAM0J,QACjCpN,EACJ2D,GAAU0J,QAAUA,GAChB5O,EAAAA,EAAAA,IAAQ,kBAAmBiF,EAAM2J,QACjCrN,EACJsN,GACI7O,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEF,SAAQqG,WAAYlB,EAAKkB,WAAY0I,eAChEtN,IAGNrB,GAAS2B,EAAAA,EAAAA,MACT3B,GAASob,EAAAA,EAAAA,KAAyBpb,EAAQqb,EAAAA,GAAmB9L,SAAUpP,IACvEyE,EAAAA,EAAAA,IAAU5E,GAEN2O,GACF7J,EAAQD,aAAa,CAAEjF,SAAQ+N,YAAY,IAC7C,KAGFvE,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,MAAEqE,EAAK,OAAE/O,GAAW0K,EACpBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,UAECjF,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BF,SACAqG,WAAYlB,EAAKkB,WACjB0I,UAEF7J,EAAQD,aAAa,CAAEjF,SAAQ+N,YAAY,IAAO,KAGpDvE,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,MAAEqE,EAAK,OAAE/O,GAAW0K,EACpBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,OAEX,IAAIyW,EAEFA,EADE7M,EAAM1N,KAAO8D,EAAK0W,oBACF3b,EAAAA,EAAAA,IAAQ,gBAAiB,CACzCF,SACAqG,WAAYlB,EAAKkB,mBAGDnG,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC6O,IAE/C6M,IAELxb,GAAS2B,EAAAA,EAAAA,MACT3B,GAAS0b,EAAAA,EAAAA,KAAgB1b,EAAQJ,EAAQ+O,EAAM1N,KAC/C2D,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQD,aAAa,CAAEjF,SAAQ+N,YAAY,IAAO,KAGpDvE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACpJ,EAAQ8E,EAASwF,KACrD,MAAM,OAAE1K,EAAM,mBAAE+b,EAAkB,qBAAEC,GAAyBtR,EACvDvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAE3BmF,IAIAjF,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiF,OAAM4W,qBAAoBC,wBAAuB,KAGtFxS,EAAAA,EAAAA,IAAiB,2BAA2B9H,UAC1C,MAAMua,QAAe/b,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK+b,EACH,OAGF,MAAMC,EAAYD,EAAO/a,QAAO,CAAC0B,EAAQuZ,KACnCA,IAAUA,EAAMrW,UAClBlD,EAAOuZ,EAAM9a,IAAM8a,GAGdvZ,IACN,CAAC,GAEJxC,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHgD,MAAO,IACFhD,EAAOgD,MACVgZ,iBAAkBrb,OAAOoD,KAAK+X,MAGlClX,EAAAA,EAAAA,IAAU5E,EAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,uBAAuB9H,MAAOtB,EAAQ8E,EAASwF,KAC9D,MAAM,UAAEgF,EAAS,OAAE1P,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EAE/D6E,GAAUzG,EAAAA,EAAAA,KAAW1I,EAAQsP,GACnC,IAAKH,EACH,OAGF,MAAMpK,QAAa0D,EAAmBzI,EAAQ8E,EAASlF,EAAQO,GAE/D,IAAK4E,EAAM,OAEX,IAAIC,GAAWqV,EAAAA,EAAAA,KAAmBra,EAAQ+E,EAAK9D,IAC/C,IAAK+D,EAAU,CACb,MAAMiX,QAAiBnc,EAAAA,EAAAA,IAAQ,gBAAiBiF,GAChD,IAAKkX,EACH,OAGFjX,EAAWiX,EAASjX,QACtB,CAEIA,EAAUkV,qBACZla,GAAS2B,EAAAA,EAAAA,MACT3B,GAASia,EAAAA,EAAAA,KAAmBja,EAAQ+E,EAAK9D,GAAI,CAAEiZ,oBAAoB,KACnEtV,EAAAA,EAAAA,IAAU5E,SAEJF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiF,OAAMiV,WAAW,MAGxDla,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEqP,UAASpK,QAAO,KAGvDqE,EAAAA,EAAAA,IAAiB,yBAAyB9H,MAAOtB,EAAQ8E,EAASwF,KAChE,MAAM,UAAEgF,GAAchF,EAEhB6E,GAAUzG,EAAAA,EAAAA,KAAW1I,EAAQsP,GACnC,IAAKH,EACH,OAGF,MAAMnK,GAAWqV,EAAAA,EAAAA,KAAmBra,EAAQsP,GAC5C,IAAIvK,EACAC,GAAUkI,eACZnI,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQgF,EAASkI,qBAG/BpN,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEqP,YAClCpK,GAEFF,EADA7E,GAAS2B,EAAAA,EAAAA,MACYmD,EAASC,EAChC,KAGFqE,EAAAA,EAAAA,IAAiB,uBAAuB,CAACpJ,EAAQ8E,EAASwF,KACxD,MAAM,iBAAE4R,EAAgB,MAAE/b,GAAQC,EAAAA,EAAAA,OAAsBkK,EAKxD,KAFkB4R,EAAmB,GAFlB9L,EAAAA,EAAAA,GAAmBpQ,EAAQ,kBAY9C,OAAOiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC5Bkc,oBACC/b,GATD2E,EAAQgE,sBAAsB,CAC5BrG,MAAO,gBACPtC,SAOK,KAGXiJ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACpJ,EAAQ8E,EAASwF,KAC3D,MAAM,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EAElD,OAAO2B,EAAAA,EAAAA,GAAejM,EAAQ,CAC5Bmc,oBAAgB9a,GACflB,EAAM,KAGXiJ,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,GAC5C,OAAE1K,IAAWU,EAAAA,EAAAA,KAAyBN,EAAQG,IAAU,CAAC,EACzD4E,EAAOnF,GAAS8I,EAAAA,EAAAA,KAAW1I,EAAQJ,QAAUyB,EACnD,IAAK0D,IAAQ4D,EAAAA,EAAAA,KAAiB5D,GAC5B,OAGF,MAAMqX,GAAS/B,EAAAA,EAAAA,KAAmBra,EAAQ+E,EAAK9D,KAAKqZ,SAAS7V,OAC7D,QAAepD,IAAX+a,QAA8C/a,IAAtB0D,EAAKG,cAA8BkX,GAAUrX,EAAKG,aAAc,OAE5F,MAAM1C,QAAe1C,EAAAA,EAAAA,IAAQ,eAAgB,CAAEiF,OAAMqX,WACrD,IAAK5Z,EACH,OAGF,MAAM,QAAE8X,EAAO,iBAAEhX,GAAqBd,EACjC8X,GAAYA,EAAQ7V,SAIzBzE,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwD,EAAAA,EAAAA,KAAgBxD,EAAQsD,GACjCtD,GAASqc,EAAAA,EAAAA,KAAerc,EAAQ+E,EAAMuV,IACtC1V,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,kBAAkB9H,MAAOtB,EAAQ8E,EAASwF,KACzD,MAAM,OAAE1K,EAAM,UAAEgP,EAAS,MAAEzO,GAAQC,EAAAA,EAAAA,OAAsBkK,EACnDvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1BsD,EAAQ0L,EAAUlF,KAAK+F,IAAW5I,EAAAA,EAAAA,KAAW7G,EAAQyP,KAAS9F,OAAOC,SAE3E,IAAK7E,IAAS7B,EAAMuB,OAClB,OAGFK,EAAQwX,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBC,QAAStc,UAC/F,MAAMiP,QAAqBtP,EAAAA,EAAAA,IAAQ,iBAAkBiF,EAAM7B,GACvDkM,IACFpP,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwP,EAAAA,EAAAA,KAA0BxP,EAAQJ,EAAQwP,EAAcjP,IACjEyE,EAAAA,EAAAA,IAAU5E,IAEZ8E,EAAQwX,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBE,OAAQvc,UAE9F0E,EADA7E,GAAS2B,EAAAA,EAAAA,MACYmD,EAASC,EAAK,KAGrCqE,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,OAAE1K,EAAM,OAAE6P,GAAWnF,EACrBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1B8G,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQyP,GAE3B1K,GAAS2B,UAIR5G,EAAAA,EAAAA,IAAQ,mBAAoBiF,EAAM2B,GAExC7B,EADA7E,GAAS2B,EAAAA,EAAAA,MACYmD,EAASC,GAAK,KAGrCqE,EAAAA,EAAAA,IAAiB,qBAAqB,CAACpJ,EAAQ8E,EAASwF,KACtD,MAAM,OAAE1K,EAAM,YAAE+c,GAAgBrS,EAC1BvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAE3BmF,IAIAjF,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEiF,OAAM4X,eAAc,KAG1DvT,EAAAA,EAAAA,IAAiB,2BAA2B9H,MAAOtB,EAAQ8E,EAASwF,KAClE,MAAM,OACJ1K,EAAM,iBAAEgd,EAAgB,eAAEC,GACxBvS,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,UAECjF,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCiF,OACA6X,mBACAC,mBAIGhY,EADL7E,GAAS2B,EAAAA,EAAAA,MACiBmD,EAASC,GAAK,KAG1CqE,EAAAA,EAAAA,IAAiB,aAAa,CAACpJ,EAAQ8E,EAASwF,KAC9C,MAAM,OAAE1K,GAAW0K,EAGnB,KAFa5B,EAAAA,EAAAA,KAAW1I,EAAQJ,GAMhC,IAAIsL,EAAAA,EAAAA,KAAqBlL,EAAQJ,IAC1BE,EAAAA,EAAAA,IAAQ,YAAa,CAAEyK,KAAM,aAC7B,CACL,MAAM7D,GAAOG,EAAAA,EAAAA,KAAW7G,EAAQJ,GAC5B8G,IACG5G,EAAAA,EAAAA,IAAQ,YAAa,CAAEyK,KAAM,OAAQ7D,QAE9C,MAGF0C,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,OAAE1K,GAAW0K,EACbvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,OAEX,MAAMvC,QAAe1C,EAAAA,EAAAA,IAAQ,oBAAqBiF,GAClD,IAAKvC,EAAQ,OAEb,MAAM,SAAEsa,GAAata,EAErBxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI,CAAE6b,cACvClY,EAAAA,EAAAA,IAAU5E,EAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,oBAAoB9H,MAAOtB,EAAQ8E,EAASwF,KAC3D,MAAM,OAAE1K,EAAM,UAAEoa,GAAc1P,EACxBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,KACAyT,EAAAA,EAAAA,KAAiBzT,KAAUwT,EAAAA,EAAAA,KAAcxT,WAExCjF,EAAAA,EAAAA,IAAQ,mBAAoBiF,EAAMiV,EAAU,KAGpD5Q,EAAAA,EAAAA,IAAiB,qBAAqB9H,MAAOtB,EAAQ8E,EAASwF,KAC5D,MAAM,OAAE1K,EAAM,UAAEoa,GAAc1P,EACxBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,KACAyT,EAAAA,EAAAA,KAAiBzT,KAAUwT,EAAAA,EAAAA,KAAcxT,WAExCjF,EAAAA,EAAAA,IAAQ,oBAAqBiF,EAAMiV,EAAU,KAGrD5Q,EAAAA,EAAAA,IAAiB,kBAAkB,CAACpJ,EAAQ8E,EAASwF,KACnD,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EAG9C,OAFAxF,EAAQiY,kBAAkB,CAAEC,SAAS,EAAO7c,UAC5C2E,EAAQiY,kBAAkB,CAAEC,SAAS,EAAOC,YAAY,EAAM9c,WACvD8L,EAAAA,EAAAA,GAAejM,EAAQ,CAC5Bkd,iBAAkBtd,GACjBO,EAAM,KAGXiJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACpJ,EAAQ8E,EAASwF,KACpD,MAAM,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EAClD,OAAO2B,EAAAA,EAAAA,GAAejM,EAAQ,CAC5Bkd,sBAAkB7b,GACjBlB,EAAM,KAGXiJ,EAAAA,EAAAA,IAAiB,8BAA8B9H,MAAOtB,EAAQ8E,EAASwF,KACrE,MAAM,SACJjE,EAAQ,OAAEsD,EAAM,WAAErC,EAAU,MAAEnH,GAAQC,EAAAA,EAAAA,OACpCkK,EACEvD,QAAYH,EAAqB5G,EAAQ8E,EAASuB,EAAUlG,GAClE,IAAK4G,EAAK,OAIV,IAFkB6C,QAAQD,GASxB,YANA7E,EAAQ0D,cAAc,CACpB2U,gBAAgB,EAChBpW,MACAO,aACAnH,UAKJH,GAAS2B,EAAAA,EAAAA,MACT,MAAQyb,YAAY,KAAEC,IAAWrd,EACjC,IAAKqd,EAAKtW,EAAI9F,IAeZ,OAdAjB,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9Bsd,0BAA2B,CACzBvW,MACAwW,UAAW,CACT1D,OAAQ,yBACRvP,QAAS,CACPvD,MACA4C,SACArC,iBAILnH,QACHyE,EAAAA,EAAAA,IAAU5E,GAGZ8E,EAAQ0Y,uBAAuB,CAC7BzW,MACA4C,SACArC,aACAnH,SACA,KAGJiJ,EAAAA,EAAAA,IAAiB,cAAc9H,MAAOtB,EAAQ8E,EAASwF,KACrD,MAAM,OAAE1K,EAAM,MAAE8N,GAAUpD,EACpBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,OAEX,MAAM0Y,GAAaC,EAAAA,EAAAA,KAAiB1d,EAAQJ,GAE5C,IAAK8N,GAAS+P,GAAYE,gBAAkBF,EAAWE,eAAelZ,SAAWgZ,EAAWG,WAC1F,OAGF,MAAMC,EAAenQ,OAQhBrM,EARwBoc,GAAYE,gBAAgB7c,QAAO,CAACgd,EAAKC,KACpE,MAAMnW,GAAQkL,EAAAA,EAAAA,KAAY9S,EAAQJ,EAAQme,GACpCC,GAAWlL,EAAAA,EAAAA,KAAY9S,EAAQJ,EAAQke,GAC7C,OAAKlW,KACAoW,GAAYpW,EAAMoL,cAAgBgL,EAAShL,eACvC+K,EAFUD,CAIT,KAGJ7c,GAAIgd,EAAeC,KAAM/b,EAAY6Q,cAAe3Q,GAAcwb,IACrE/K,EAAAA,EAAAA,KAAY9S,EAAQJ,EAAQie,IAAiB,CAAC,EAC7Crb,QAAe1C,EAAAA,EAAAA,IAAQ,cAAe,CAC1CiF,OAAMkZ,gBAAe5b,WAAUF,aAAYM,MAAOwb,EAAgBE,EAAAA,IAAeC,EAAAA,MAG9E5b,IAELxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASuM,EAAAA,EAAAA,KAAYvM,EAAQwC,EAAOmB,UACpC3D,GAASqe,EAAAA,EAAAA,KAAare,EAAQJ,EAAQ4C,EAAO8b,MAAO9b,EAAO+b,QAC3Dve,GAASwe,EAAAA,EAAAA,KAAqBxe,EAAQJ,EAAQ4C,EAAO+b,OAAO7U,KAAK9B,GAAUA,EAAM3G,MACjFN,OAAO8d,QAAQjc,EAAOwB,YAAc,CAAC,GAAGC,SAAQ,EAAEpE,EAAUqE,MAC1DlE,GAASwE,EAAAA,EAAAA,KAAmBxE,EAAQJ,EAAQoM,OAAOnM,GAAW,QAASqE,EAAM,IAE/EvD,OAAO8d,QAAQjc,EAAOkc,6BAA+B,CAAC,GAAGza,SAAQ,EAAE8D,EAASV,MAC1ErH,GAASwM,EAAAA,EAAAA,KAAiBxM,EAAQJ,EAAQoM,OAAOjE,GAAU,CAAEkL,uBAAwB5L,GAAY,KAGnGzC,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,iBAAiB9H,MAAOtB,EAAQ8E,EAASwF,KACxD,MAAM,OAAE1K,EAAM,QAAEmI,GAAYuC,EAEtBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,OAEX,MAAMvC,QAAe1C,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEiF,OAAMgD,YAEvD,GAAKvF,EAQLxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASuM,EAAAA,EAAAA,KAAYvM,EAAQwC,EAAOmB,UACpC3D,GAASwO,EAAAA,EAAAA,KAAYxO,EAAQJ,EAAQmI,EAASvF,EAAOoF,QAErDhD,EAAAA,EAAAA,IAAU5E,QAXR,GAAI,UAAWsK,GAAWA,EAAQqU,uBAAwB,CACxD,MAAM,MAAExe,GAAQC,EAAAA,EAAAA,OAAsBkK,EACtCxF,EAAQqE,SAAS,CAAElI,QAAII,EAAWlB,SACpC,CAQe,KAGnBiJ,EAAAA,EAAAA,IAAiB,eAAe9H,MAAOtB,EAAQ8E,EAASwF,KACtD,MAAM,OAAE1K,EAAM,UAAEoa,EAAS,MAAE7Z,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEnDvF,QAAa0D,EAAmBzI,EAAQ8E,EAASlF,EAAQO,GAC/D,IAAK4E,EACH,OAGF,IAAIvC,EACJ,IACEA,QAAe1C,EAAAA,EAAAA,IAAQ,cAAe,CAAEiF,OAAMiV,aAChD,CAAE,MAAOnR,GAC6B,UAA/BA,EAAmB5B,QACtBnC,EAAQkC,iBAAiB,CAAEC,QAASC,EAAAA,GAA0B,aAAc/G,UAE5E2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAE9E,CAEIqC,IACFxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQ+E,EAAK9D,GAAI,CAAEyE,QAASsU,KAChDpV,EAAAA,EAAAA,IAAU5E,GAELga,EAGHlV,EAAQ8Z,eAAe,CAAEhf,OAAQmF,EAAK9D,GAAId,UAF1C2E,EAAQ+Z,gBAAgB,CAAE1e,UAI9B,KAGFiJ,EAAAA,EAAAA,IAAiB,4BAA4B9H,MAAOtB,EAAQ8E,EAASwF,KACnE,MAAM,OAAE1K,EAAM,UAAEoa,GAAc1P,EACxBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAM+Z,GAAgBzE,EAAAA,EAAAA,KAAmBra,EAAQ+E,EAAK9D,KAAK8d,sBAC3D/e,GAASia,EAAAA,EAAAA,KAAmBja,EAAQJ,EAAQ,CAAEmf,sBAAuB/E,KACrEpV,EAAAA,EAAAA,IAAU5E,SAEWF,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEiF,OAAMiV,oBAEhC3Y,IAAlByd,IACb9e,GAAS2B,EAAAA,EAAAA,MACT3B,GAASia,EAAAA,EAAAA,KAAmBja,EAAQJ,EAAQ,CAAEmf,sBAAuBD,KACrEla,EAAAA,EAAAA,IAAU5E,GACZ,KAGFoJ,EAAAA,EAAAA,IAAiB,eAAe9H,MAAOtB,EAAQ8E,EAASwF,KACtD,MAAM,OACJ1K,EAAM,MAAE6O,EAAK,UAAEuQ,EAAS,YAAEC,EAAW,MACrC9e,GAAQC,EAAAA,EAAAA,OACNkK,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EAAM,QAEPoH,EAAAA,EAAAA,KAAenM,EAAQG,GAAO+e,mBAChClf,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9Bkf,iBAAkB,CAChBtf,SACAuf,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,IAGZ,MAAM+H,QAAgBjI,EAAAA,EAAAA,IAAQ,cAAe,CAC3CiF,OAAM0J,QAAOuQ,YAAWC,gBAEtBlX,GACFjD,EAAQkD,WAAW,CACjBpI,SAAQC,SAAUkI,EAAS0C,sBAAsB,EAAMtK,UAG3D2E,EAAQsa,sBAAsB,CAAEjf,SAAQ,KAG1CiJ,EAAAA,EAAAA,IAAiB,eAAe9H,MAAOtB,EAAQ8E,EAASwF,KACtD,MAAM,OAAE1K,EAAM,QAAEmI,GAAYuC,EACtBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,UAECjF,EAAAA,EAAAA,IAAQ,cAAe,CAAEiF,OAAMgD,YAErC/H,GAAS2B,EAAAA,EAAAA,MACT3B,GAASqf,EAAAA,EAAAA,KAAYrf,EAAQJ,EAAQmI,IACrCnD,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,aAAa9H,MAAOtB,EAAQ8E,EAASwF,KACpD,MAAM,OACJ1K,EAAM,QAAEmI,EAAO,MAAE5H,GAAQC,EAAAA,EAAAA,SAAsB+a,GAC7C7Q,EACEvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1BgI,GAAQkL,EAAAA,EAAAA,KAAY9S,EAAQJ,EAAQmI,GACrChD,GAAS6C,KAEVuE,EAAAA,EAAAA,KAAenM,EAAQG,GAAOmf,iBAChCtf,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9Bsf,eAAgB,CACd1f,SACAmI,UACAoX,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,UAGSF,EAAAA,EAAAA,IAAQ,YAAa,CAAEiF,OAAMgD,aAAYoT,MAG9Dnb,GAAS2B,EAAAA,EAAAA,MACT3B,GAASwO,EAAAA,EAAAA,KAAYxO,EAAQJ,EAAQmI,EAASoT,IAC9CvW,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQya,oBAAoB,CAAEpf,WAAQ,KAGxCiJ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACpJ,EAAQ8E,EAASwF,KACtD,MAAM,OACJ1K,EAAM,QAAEmI,EAAO,SAAEiJ,EAAQ,MAAE7Q,GAAQC,EAAAA,EAAAA,OACjCkK,GAEE,kBAAEkV,GAAsBxf,EAAOyZ,WAAa,CAAC,EAC7C1U,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC1B2e,GAAS1W,EAAAA,EAAAA,KAAa7H,EAAQJ,GAC/BmF,GAASwZ,GAAWiB,IAErBxO,GAAYrQ,OAAOC,OAAO2d,GAAQ5U,QAAQ/B,GAAUA,EAAMoJ,WAAUvM,QAAU+a,EAChF1a,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,2BAA4BsY,EAAmB,KAClFrf,WAKCL,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEiF,OAAMgD,UAASiJ,aAAW,KAGhE5H,EAAAA,EAAAA,IAAiB,uBAAuB9H,MAAOtB,EAAQ8E,EAASwF,KAC9D,MAAM,KAAEqM,EAAI,MAAExW,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEtC9H,QAAe1C,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE6W,SACjDnU,GAQLxC,GAAS2B,EAAAA,EAAAA,MAET3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9Byf,cAAe,CACbpM,OAAQ7Q,EAAO6Q,SAEhBlT,IAEHyE,EAAAA,EAAAA,IAAU5E,IAfR8E,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,6BACnC/G,SAaa,KAGnBiJ,EAAAA,EAAAA,IAAiB,sBAAsB9H,MAAOtB,EAAQ8E,EAASwF,KAC7D,MAAM,OAAE+I,EAAM,QAAEqM,EAAO,MAAEvf,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEjDqV,EAAQD,EAAQhW,KAAKoE,IAAWpF,EAAAA,EAAAA,KAAW1I,EAAQ8N,KAASnE,OAAOC,SACnEgW,EAAwBD,EAAMhW,QAAQkW,GAASA,EAAKC,cAAarb,OAEjEsb,EAAiB,aAAc1M,GAAS/C,EAAAA,EAAAA,KAAiBtQ,EAAQqT,EAAOlD,eAAY9O,EACpF2e,EAAe,UAAW3M,EAASA,EAAO5E,MAAQsR,GAAgBtR,MAExE,IAEE,UADqB3O,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE6W,KAAMtD,EAAOsD,KAAMgJ,UAC3D,OAEb,GAAII,EAoBF,YAnBAjb,EAAQkC,iBAAiB,CACvByH,MAAO,CACL6J,IAAK,qCACL2H,UAAW,CACTxR,MAAOuR,EAAYvY,OAGvBR,QAAS,CACPqR,IAAK,wCACL2H,UAAW,CACT3B,MAAOsB,GAETM,QAAS,CACPC,YAAaP,IAGjBzf,UAMJ2E,EAAQkC,iBAAiB,CACvByH,MAAO,CACL6J,IAAK,mCACL2H,UAAW,CACTxR,MAAOuR,EAAYvY,OAGvBR,QAAS,CACPqR,IAAK,sCACL2H,UAAW,CACT3B,MAAOsB,GAETM,QAAS,CACPC,YAAaP,IAGjBzf,SAEJ,CAAE,MAAO0I,GAC6B,uBAA/BA,EAAmB5B,QACtBnC,EAAQgE,sBAAsB,CAAErG,MAAO,iBAAkBtC,UAEzD2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAE9E,MAGFiJ,EAAAA,EAAAA,IAAiB,iBAAiB9H,MAAOtB,EAAQ8E,EAASwF,KACxD,MAAM,SAAE6F,EAAQ,QAAEuP,EAAO,MAAEvf,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEnD+F,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQmQ,GAElCwP,EAAQD,GAAShW,KAAKoE,IAAWpF,EAAAA,EAAAA,KAAW1I,EAAQ8N,KAASnE,OAAOC,UAAY,SAEjE9J,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEqQ,WAAUwP,WAGrDtP,GAELvL,EAAQkC,iBAAiB,CACvByH,MAAO,CACL6J,IAAK,qCACL2H,UAAW,CACTxR,MAAO4B,EAAO5B,MAAMhH,OAGxBR,QAAS,CACPqR,IAAK,wCACL2H,UAAW,CACT3B,MAAOqB,EAAMlb,QAEfyb,QAAS,CACPC,YAAaR,EAAMlb,SAGvBtE,SACA,KAGJiJ,EAAAA,EAAAA,IAAiB,uBAAuB9H,MAAOtB,EAAQ8E,EAASwF,KAC9D,MAAM,SAAE6F,GAAa7F,EAEf9H,QAAe1C,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEqQ,aAElD3N,IAELxC,GAAS2B,EAAAA,EAAAA,MAET3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACV6O,QAAS,IACJpgB,EAAOuR,YAAY6O,QACtB,CAACjQ,GAAW3N,EAAO4d,YAIzBxb,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,wBAAwB9H,MAAOtB,EAAQ8E,EAASwF,KAC/D,MAAM,SAAE6F,EAAQ,MAAEhQ,GAAQC,EAAAA,EAAAA,OAAsBkK,EAE1C+F,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQmQ,GACxC,IAAKE,EAAQ,OAUb,IAAI7N,EARJxC,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BqgB,kBAAmB,KACdlU,EAAAA,EAAAA,KAAenM,EAAQG,GAAOkgB,kBACjClB,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,GAIV,IACEwC,QAAe1C,EAAAA,EAAAA,IAAQ,sBAAuB,CAC5CqQ,WACAwP,MAAOtP,EAAOK,gBAAgBoB,OAAOzB,EAAOI,eAAiB,IAC1D/G,KAAK9J,IAAW8I,EAAAA,EAAAA,KAAW1I,EAAQJ,KAAWiH,EAAAA,EAAAA,KAAW7G,EAAQJ,KAAS+J,OAAOC,UAExF,CAAE,MAAOf,GACHzJ,EAA0B+K,IAAKtB,EAAmB5B,UACpDnC,EAAQgE,sBAAsB,CAAErG,MAAO,kBAAmBtC,UAC1D2E,EAAQ4N,0BAA0B,CAAE4N,OAAQC,EAAAA,GAAgBC,QAASrgB,WAErE2E,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAE9E,CAEA,IAAKqC,IAAWA,EAAO6Q,OAAQ,OAE/B,MAAM,kBAAEgN,IAAsBlU,EAAAA,EAAAA,KAAenM,EAAQG,GAEhDkgB,IAELrgB,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACVU,KAAM,IACDjS,EAAOuR,YAAYU,KACtB,CAAC9B,GAAW,IACPnQ,EAAOuR,YAAYU,KAAK9B,MACxB3N,EAAOmH,SAGdyW,QAAS,IACJpgB,EAAOuR,YAAY6O,QACtB,CAACjQ,GAAW,IACNnQ,EAAOuR,YAAY6O,QAAQjQ,IAAa,GAC5C3N,EAAO6Q,WAKfrT,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BqgB,kBAAmB,IACdA,EACHnM,IAAK1R,EAAO6Q,OAAOa,IACnBiL,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,sBAAsB9H,MAAOtB,EAAQ8E,EAASwF,KAC7D,MAAM,SACJ6F,EAAQ,QAAEuP,EAAO,IAAExL,EAAG,MAAE/T,GAAQC,EAAAA,EAAAA,OAC9BkK,EAEEqM,EAAOzC,EAAI2B,MAAM,KAAK4K,MAC5B,IAAK9J,EAAM,OAEX,MAAMgJ,EAAQD,EACXhW,KAAK9J,IAAW8I,EAAAA,EAAAA,KAAW1I,EAAQJ,KAAWiH,EAAAA,EAAAA,KAAW7G,EAAQJ,KAAS+J,OAAOC,SAEpF5J,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BqgB,kBAAmB,KACdlU,EAAAA,EAAAA,KAAenM,EAAQG,GAAOkgB,kBACjClB,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,GAEV,IACE,MAAMwC,QAAe1C,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEqQ,WAAUwG,OAAMgJ,UAErE,IAAKnd,EACH,OAGFxC,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACV6O,QAAS,IACJpgB,EAAOuR,YAAY6O,QACtB,CAACjQ,GAAWnQ,EAAOuR,YAAY6O,QAAQjQ,IAAWzG,KAAK2J,GACjDA,EAAOa,MAAQA,EACV1R,EAEF6Q,QAKfzO,EAAAA,EAAAA,IAAU5E,EACZ,CAAE,MAAO6I,GACP/D,EAAQiE,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ9I,SAC5E,CAAE,QACAH,GAAS2B,EAAAA,EAAAA,MAET3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BqgB,kBAAmB,KACdlU,EAAAA,EAAAA,KAAenM,EAAQG,GAAOkgB,kBACjClB,WAAW,IAEZhf,IACHyE,EAAAA,EAAAA,IAAU5E,EACZ,MAGFoJ,EAAAA,EAAAA,IAAiB,wBAAwB9H,MAAOtB,EAAQ8E,EAASwF,KAC/D,MAAM,SAAE6F,EAAQ,IAAE+D,GAAQ5J,EAEpBqM,EAAOzC,EAAI2B,MAAM,KAAK4K,MAEvB9J,SAEgB7W,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEqQ,WAAUwG,WAIjE3W,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHuR,YAAa,IACRvR,EAAOuR,YACV6O,QAAS,IACJpgB,EAAOuR,YAAY6O,QACtB,CAACjQ,GAAWnQ,EAAOuR,YAAY6O,QAAQjQ,IAAWxG,QAAQ0J,GAAWA,EAAOa,MAAQA,QAI1FtP,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,6BAA6B9H,MAAOtB,EAAQ8E,EAASwF,KACpE,MAAM,SAAE6F,EAAQ,uBAAEuQ,EAAsB,MAAEvgB,GAAQC,EAAAA,EAAAA,OAAsBkK,EAClE+F,GAASC,EAAAA,EAAAA,KAAiBtQ,EAAQmQ,GACxC,GAAKE,EAAL,CAEA,GAAIA,EAAOsQ,cAAgBtQ,EAAOuQ,cAAgBF,GAAyB,CACzE,MAAMG,GAAa/W,EAAAA,EAAAA,IAAcqG,GAC3B2Q,QAAoBhhB,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEqQ,aAWrE,OAVAnQ,GAAS2B,EAAAA,EAAAA,MACT3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9Byf,cAAe,CACbsB,QAAS,CACP5Q,WACA6Q,kBAAkBC,EAAAA,EAAAA,IAAO,IAAKH,GAAe,MAASD,GAAc,QAGvE1gB,QACHyE,EAAAA,EAAAA,IAAU5E,EAEZ,CAEAA,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkhB,wBAAyB/Q,GACxBhQ,IAEHyE,EAAAA,EAAAA,IAAU5E,EAtBS,CAsBF,KAGnBoJ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACpJ,EAAQ8E,EAASwF,KAC/D,MAAM,OAAE1K,EAAM,iBAAEuhB,GAAqB7W,EAOrC,OALAtK,GAAS2B,EAAAA,EAAAA,OACA8D,EAAAA,EAAAA,KAAWzF,EAAQJ,EAAQ,CAClCuhB,yBACC9f,GAAW,EAED,KAGf+H,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,EAASwF,KACjE,MAAM,OAAE1K,EAAM,UAAEoa,GAAc1P,EACxBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,QAIU1D,UAFMvB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiF,OAAMiV,gBAI/Dha,GAAS2B,EAAAA,EAAAA,MACT3B,GAASohB,EAAAA,EAAAA,KAAmBphB,EAAQJ,EAAQ,CAC1CyhB,uBAAuBrH,QAAY3Y,KAErCuD,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACpJ,EAAQ8E,EAASwF,KAC3D,MAAM,OAAE1K,EAAM,UAAEoa,GAAc1P,EAExBvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAC3BmF,GAAMW,SAAWX,EAAKI,oBAAsB6U,IAIjDha,GAASyF,EAAAA,EAAAA,KAAWzF,EAAQJ,EAAQ,CAAEuF,kBAAmB6U,QAAa3Y,KACtEuD,EAAAA,EAAAA,IAAU5E,IAELF,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEiF,OAAMiV,cAAY,KAG7D5Q,EAAAA,EAAAA,IAAiB,8BAA8B9H,MAAOtB,EAAQ8E,EAASwF,KACrE,MAAM,OAAE1K,GAAW0K,EACbvF,EAAOnF,GAAS8I,EAAAA,EAAAA,KAAW1I,EAAQJ,QAAUyB,EAEnD,GAAIzB,IAAWmF,EACb,OAGF,IAAKnF,IACuB0hB,EAAAA,EAAAA,KAAwBthB,EAAQuhB,EAAAA,KACnC,OAGzB,MAAM/e,QAAe1C,EAAAA,EAAAA,IAAQ,8BAA+B,CAC1DiF,SAGF,IAAKvC,EACH,OAGF,MAAM,gBAAEgf,EAAe,MAAElD,GAAU9b,EAE7Bif,GAAY1e,EAAAA,EAAAA,IAAqBye,EAAiB,MAExDxhB,GAAS2B,EAAAA,EAAAA,MACT3B,GAAS0hB,EAAAA,EAAAA,KAAuB1hB,EAAQJ,GAAU2hB,EAAAA,IAA8B5gB,OAAOoD,KAAK0d,GAAYnD,IACxG1Z,EAAAA,EAAAA,IAAU5E,EAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,EAASwF,KACjE,MAAM,OAAEmF,GAAWnF,EACb5D,GAAOgC,EAAAA,EAAAA,KAAW1I,EAAQyP,GAEhC,IAAK/I,EACH,OAGF,MAAMlE,QAAe1C,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD4G,SAGF,IAAKlE,EACH,OAGF,MAAM,YAAEmf,EAAW,MAAErD,GAAU9b,EAEzBU,GAAQH,EAAAA,EAAAA,IAAqB4e,EAAa,MAEhD3hB,GAAS2B,EAAAA,EAAAA,MACT3B,GAASmT,EAAAA,EAAAA,KAASnT,EAAQkD,GAC1BlD,GAAS4hB,EAAAA,EAAAA,KAAe5hB,EAAQyP,EAAQ9O,OAAOoD,KAAKb,GAAQob,IAC5D1Z,EAAAA,EAAAA,IAAU5E,EAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACpJ,EAAQ8E,EAASwF,KACjE,MAAM,OAAE1K,GAAW0K,GACN5B,EAAAA,EAAAA,KAAW1I,EAAQJ,KAMhCI,GAAS6hB,EAAAA,EAAAA,KAAsB7hB,EAAQJ,IACvCgF,EAAAA,EAAAA,IAAU5E,GAAO,KAGnBoJ,EAAAA,EAAAA,IAAiB,2BAA2B9H,MAAOtB,EAAQ8E,EAASwF,KAClE,MAAM,KAAEqM,EAAI,MAAExW,GAAQC,EAAAA,EAAAA,OAAsBkK,EACtC9H,QAAe1C,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE6W,SAC1D,IAAKnU,EAKH,YAJAsC,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,6BACnC/G,UAKJ,MAAM,SAAE2hB,GAAatf,EAErBsC,EAAQwD,kBAAkB,CACxB1I,OAAQkiB,EAASliB,OACjB6H,KAAMqa,EAASra,KACftH,SACA,KAGJiJ,EAAAA,EAAAA,IAAiB,0BAA0B9H,MAAOtB,EAAQ8E,EAASwF,KACjE,MAAM,KACJC,EAAI,YAAEwX,EAAW,OAAEjU,EAAM,MAAE3N,GAAQC,EAAAA,EAAAA,OACjCkK,EAEJ,IAAI0X,EAOJ,GANa,UAATzX,IACFyX,EAAmB,CAAEC,MAAOF,IAEjB,aAATxX,IACFyX,EAAmB,CAAE3b,SAAU0b,KAE5BC,EAAkB,OAEvB,MAAMxf,QAAe1C,EAAAA,EAAAA,IAAQ,sBAAuBkiB,GAC/Cxf,GAKLxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASiM,EAAAA,EAAAA,GAAejM,EAAQ,CAC9BkiB,qBAAsB,IACjB1f,EACH+H,OACAwX,cACAjU,WAED3N,IACHyE,EAAAA,EAAAA,IAAU5E,KAbRmiB,EAAAA,EAAAA,IAAoBJ,EAaL,G,uPCvwFnB,MAAMK,EAAc,0oBAEpB,IAAIC,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEOnH,QAAQC,IAAI5a,OAAOC,OAAO2hB,GAAQ7Y,KAAKgZ,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAAMR,EACZM,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAMlZ,QACNkZ,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,GAEdK,EAAAA,EAAAA,KAAoB,KAClBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEAviB,eAAeijB,EAAsCvkB,EAAWiF,GAC9D,MAAMzC,QAAe1C,EAAAA,EAAAA,IAAQ,eAAgB,CAC3C0kB,KAAMvf,IAGR,IAAKzC,EAAQ,OAEbxC,GAAS2B,EAAAA,EAAAA,MAET,MAAMyD,GAAoBC,EAAAA,EAAAA,IAAgBrF,EAAQiF,EAAUhE,IAY5D,OAVAjB,GAASsF,EAAAA,EAAAA,IACPtF,EACAiF,EAAUhE,IACVsE,EAAAA,EAAAA,IAAK/C,EAAOyC,UAAW,CAAC,yBACxB5D,EACA+D,GAAmBqf,cAAWpjB,EAAYmB,EAAOyC,UAAUO,oBAG7DZ,EAAAA,EAAAA,IAAU5E,GAEHwC,EAAOyC,SAChB,CAEA,SAASyf,EACPzf,EAAkC0f,GAElC,OAAO7kB,EAAAA,EAAAA,IAAQ,6BAA8B,CAC3C0kB,KAAMvf,EACNmX,OAAQuI,GAEZ,EAEAvb,EAAAA,EAAAA,IAAiB,wBAAwB,CAACpJ,EAAQ8E,EAASwF,KACzD,MAAM,MAAEoD,EAAK,MAAEvN,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EACzD,OAAO2B,EAAAA,EAAAA,GAAejM,EAAQ,CAC5B4kB,mBAAoB,UAAYta,GAAW,CAAC,GAAKoD,IAASvB,EAAAA,EAAAA,KAAenM,EAAQG,GAAOykB,oBACvFzkB,EAAM,KAGXiJ,EAAAA,EAAAA,IAAiB,+BAA+B9H,MAAOtB,EAAQ8E,EAASwF,KACtE,MAAM,WAAEua,EAAU,GAAE5jB,GAAOqJ,EACrBrF,GAAYI,EAAAA,EAAAA,IAAgBrF,EAAQiB,GAErCgE,IAED4f,UACIN,EAAevkB,EAAQiF,GAC7BjF,GAAS2B,EAAAA,EAAAA,YACH+iB,EAA6Bzf,UAG/BnF,EAAAA,EAAAA,IAAQ,mCAAoC,CAChD+kB,aACAL,KAAMvf,IACN,KAGJmE,EAAAA,EAAAA,IAAiB,mBAAmB9H,MAAOtB,EAAQ8E,EAASwF,KAC1D,MAAM,OAAE1K,EAAM,MAAEO,GAAQC,EAAAA,EAAAA,OAAsBkK,EAExCvF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAChC,IAAKmF,EACH,OAGF,MAAMvC,QAAe1C,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C+f,KAAM9a,IAGHvC,IAELxC,GAAS2B,EAAAA,EAAAA,MACT3B,GAASsF,EAAAA,EAAAA,IAAgBtF,EAAQwC,EAAOvB,GAAI,IACvCuB,EACH5C,YAEFgF,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQggB,8BAA8B,CAAE7jB,GAAIuB,EAAOvB,GAAIgF,WAAYzD,EAAOyD,WAAY9F,UAAQ,KAGhGiJ,EAAAA,EAAAA,IAAiB,6BAA6B9H,MAAOtB,EAAQ8E,EAASwF,KACpE,MAAM,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBkK,GAAW,CAAC,EAC5CrF,GAAY8f,EAAAA,EAAAA,IAAsB/kB,GAExC,IAAKiF,IAAcA,EAAUrF,OAC3B,OAGF,MAAMmF,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQiF,EAAUrF,QAC1C,IAAKmF,EACH,OAGF,MAAMigB,EAAoBpb,SAAQqb,EAAAA,EAAAA,KAAgBlgB,IAElD,IAAImgB,GAAa7K,EAAAA,EAAAA,KAAmBra,EAAQ+E,EAAK9D,KAAKikB,WAClDF,IACFE,QAAmBplB,EAAAA,EAAAA,IAAQ,wBAAyB,CAClD0kB,KAAMvf,EACNkgB,eAAe,KAIdD,KAIL/C,EAAAA,EAAAA,IAAoB+C,GACpBpgB,EAAQkC,iBAAiB,CACvBC,QAAS,CACPqR,IAAK,cAEPnY,UACA,KAGJiJ,EAAAA,EAAAA,IAAiB,uBAAuB9H,MAAOtB,EAAQ8E,EAASwF,KAC9D,MAAM,SAAEjE,EAAQ,WAAEmR,EAAU,MAAErX,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEtDvF,QAAaqB,EAAAA,EAAAA,IAAoBpG,EAAQqG,GAE/C,IAAKtB,EAEH,YADAD,EAAQkC,iBAAiB,CAAEC,QAASC,EAAAA,GAA0B,mBAAoB/G,UAIpFH,GAAS2B,EAAAA,EAAAA,MACT,MAAMyjB,QAAavgB,EAAAA,EAAAA,IAAa7E,EAAQ8E,EAASC,GAE7CqgB,GAAMngB,WACRH,EAAQggB,8BAA8B,CACpC7jB,GAAImkB,EAAKngB,UAAUhE,GACnBgF,WAAYmf,EAAKngB,UAAUgB,WAC3BuR,aACArX,SAEJ,KAGFiJ,EAAAA,EAAAA,IAAiB,iCAAiC,CAACpJ,EAAQ8E,EAASwF,KAClExF,EAAQugB,2BAA2B,CACjCxL,OAAQ,gBACRvP,UACAnK,MAAOmK,EAAQnK,QAASC,EAAAA,EAAAA,OACxB,KAGJgJ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACpJ,EAAQ8E,EAASwF,KAC/DxF,EAAQugB,2BAA2B,CACjCxL,OAAQ,aACRvP,aAASjJ,EACTlB,MAAOmK,GAASnK,QAASC,EAAAA,EAAAA,OACzB,KAGJgJ,EAAAA,EAAAA,IAAiB,iBAAiB9H,MAAOtB,EAAQ8E,EAASwF,KACxD,MAAM,OACJ1K,EAAM,GAAEqB,EAAE,WAAEgF,EAAU,WAAEuR,EAAU,MAAErX,GAAQC,EAAAA,EAAAA,OAC1CkK,EAEJ,IAAKgb,EAAAA,GAKH,YAJAxgB,EAAQkC,iBAAiB,CACvBC,QAAS,kDACT9G,UAKJ,GAAIH,EAAOulB,UAET,YADAzgB,EAAQ0gB,qBAAqB,CAAErlB,WA+JnC,WACE,MAAMslB,EAXE,IAAKhQ,OAAOiQ,cAAiBjQ,OAAekQ,oBAYpDtD,EAAe,IAAIe,MACnBd,EAAemD,EACfpD,EAAauD,UAAYC,EAAQJ,IACjCK,EAAAA,EAAAA,GAASzD,EACX,CAjKE0D,GAEAtD,IAEKuD,EADLhmB,GAAS2B,EAAAA,EAAAA,MACuCmD,GAAS,EAAM3E,GAE/D,MAAQ8lB,YAAY,kBAAEC,IAAwBlmB,EAC9C,IAAIiF,EAAYhE,GAAKoE,EAAAA,EAAAA,IAAgBrF,EAAQiB,IAAMklB,EAAAA,EAAAA,IAAoBnmB,EAAQJ,GAE/E,GAAIqF,GAAaA,EAAUhE,KAAOilB,EAChCphB,EAAQ0gB,qBAAqB,CAAErlB,eAIjC,GAAI+lB,EACE,mBAAoBphB,GACtBA,EAAQshB,eAAe,CACrBC,OAAQ/b,EACRnK,eAMN,GAAI8E,GAAaihB,IAAsBjhB,EAAUhE,GAC/C6D,EAAQ0gB,qBAAqB,CAAErlB,cADjC,CAKA,GAAK8E,GAAehE,GAAOgF,IAAerG,GAQ9BqF,GAAahE,GAAMgF,IAC7BhB,QAAkBsf,EAAevkB,EAAQ,CACvCiB,KACAgF,oBAX8C,CAChD,MAAMlB,GAAO2D,EAAAA,EAAAA,KAAW1I,EAAQJ,GAEhC,IAAKmF,EAAM,aAELF,EAAAA,EAAAA,IAAa7E,EAAQ8E,EAASC,GACpC/E,GAAS2B,EAAAA,EAAAA,MACTsD,GAAYkhB,EAAAA,EAAAA,IAAoBnmB,EAAQJ,EAC1C,CAOKqF,IAELjF,GAAS2B,EAAAA,EAAAA,MACT3B,GAASsF,EAAAA,EAAAA,IACPtF,EACAiF,EAAUhE,GACV,IACKgE,EACHuS,mBAEFnW,EACA4D,EAAUO,kBAAoB,GAEhCxF,EAAS,IACJA,EACHimB,WAAY,IACPjmB,EAAOimB,WACVC,kBAAmBjhB,EAAUhE,MAIjC2D,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQ0gB,qBAAqB,CAAE9X,OAAO,EAAOvN,UAxC7C,CAwCqD,KAGvDiJ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACpJ,EAAQ8E,EAASwF,KACvD,MAAM,MAAEoY,GAAUpY,EAEbiY,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAWza,QAEN,aAAVkZ,GACFH,EAAO2B,SAAS1a,QAEJ,YAAVkZ,GACFH,EAAO+B,QAAQ9a,SAEjBsc,EAAAA,EAAAA,GAASvD,EAAOG,IAGV,KAGVtZ,EAAAA,EAAAA,IAAiB,iCAAkCpJ,IACjD,MAAMiF,GAAY8f,EAAAA,EAAAA,IAAsB/kB,GACnCiF,GAIAyf,EAA6Bzf,EAAWA,EAAU0f,WAAW,KAGpEvb,EAAAA,EAAAA,IAAiB,+BAA+B,CAACpJ,EAAQ8E,EAASwF,KAChExF,EAAQugB,2BAA2B,CACjCxL,OAAQ,cACRvP,UACAnK,MAAOmK,EAAQnK,QAASC,EAAAA,EAAAA,OACxB,KAGJgJ,EAAAA,EAAAA,IAAiB,eAAe,CAACpJ,EAAQ8E,EAASwF,KAChD,MAAM,OAAEmF,EAAM,QAAE6W,EAAO,MAAEnmB,GAAQC,EAAAA,EAAAA,OAAsBkK,EAEnDtK,EAAOulB,UACTzgB,EAAQ0gB,qBAAqB,CAAErlB,WAIpB0G,EAAAA,EAAAA,KAAW7G,EAAQyP,KAMhCgT,IAEKuD,EADLhmB,GAAS2B,EAAAA,EAAAA,MACuCmD,EAASwhB,EAASnmB,GAElEH,GAAS2B,EAAAA,EAAAA,MACT3B,EAAS,IACJA,EACHulB,UAAW,CACTtkB,GAAI,GACJslB,MAAO,aACPC,cAAe/W,EACf6W,UACAG,QAASzmB,EAAOoL,iBAGpBxG,EAAAA,EAAAA,IAAU5E,GAEV8E,EAAQ0gB,qBAAqB,CAAE9X,OAAO,EAAOvN,UAAQ,IAOvD,MAAM0lB,EAAWJ,IACf,MAAMiB,EAAajB,EAAIkB,mBACjBC,EAAMF,EAAWtC,QAAQqB,EAAIoB,gCAEnC,OADAH,EAAW9O,QACJ,IAAIkP,YAAY,CAACnmB,OAAOomB,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,KAAU,EAW/F,SAASC,IACd,OAAO9E,CACT,CAEO,SAAS+E,IACd,OAAO9E,CACT,CAEO,SAAS+E,IACdhF,GAAc7Y,QACd8Y,OAAejhB,EACfghB,OAAehhB,CACjB,CAKO,SAAS2kB,EACdhmB,EACA8E,EAAgCwhB,MAC5BnmB,GAAQC,EAAAA,EAAAA,QAERkmB,EACFgB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1CzE,MAAMgE,IACkC,IAAnCA,EAAOU,iBAAiBjjB,OAC1BK,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,qBACnC/G,WAGF6mB,EAAOW,YAAY1jB,SAAS2jB,GAAUA,EAAMC,SAC5CC,EAA0B9nB,EAAQ8E,EAAS3E,GAC7C,IAED4nB,OAAM,KACLjjB,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,qBACnC/G,SACA,IAGN2nB,EAA0B9nB,EAAQ8E,EAAS3E,EAE/C,CAEA,SAAS2nB,EACP9nB,EAAW8E,MAAoC3E,GAAQC,EAAAA,EAAAA,QAEvDknB,UAAUC,aAAaC,aAAa,CAAEQ,OAAO,IAC1ChF,MAAMgE,IACkC,IAAnCA,EAAOC,iBAAiBxiB,OAC1BK,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,yCACnC/G,UAGF6mB,EAAOW,YAAY1jB,SAAS2jB,GAAUA,EAAMC,QAC9C,IAEDE,OAAM,KACLjjB,EAAQkC,iBAAiB,CACvBC,QAASC,EAAAA,GAA0B,yCACnC/G,SACA,GAER,C,+GCteO,SAASmF,EACdtF,EACAioB,EACAC,EACAC,EACAC,GAEA,MAKMC,EALa1nB,OAAOC,OAAO,IAC5BZ,EAAOimB,WAAWhU,KAAKgW,IAAcI,gBACrCH,EAAgBG,eAEO1e,QAAO,EAAG2e,aAAcA,IACtBxnB,QAAO,CAACgd,EAA2CC,KAC/ED,EAAIC,EAAG9c,IAAM8c,EACND,IACN,CAAC,GAEJ,MAAO,IACF9d,EACHimB,WAAY,IACPjmB,EAAOimB,WACVhU,KAAM,IACDjS,EAAOimB,WAAWhU,KACrB,CAACgW,GAAc,IACVjoB,EAAOimB,WAAWhU,KAAKgW,OACvB1iB,EAAAA,EAAAA,IAAK2iB,EAAiB,CAAC,yBACtBC,GAAyB,CAC3B3iB,kBAAmBxF,EAAOimB,WAAWhU,KAAKgW,GAAaziB,kBAAoB2iB,WAE/C9mB,IAA1B+mB,GAAuC,CACzC5iB,kBAAmB4iB,GAErBC,kBAKV,CAEO,SAASE,EACdvoB,EACAioB,GAEA,MAAMhjB,GAAYI,EAAAA,EAAAA,IAAgBrF,EAAQioB,GAU1C,OATIhjB,GAAaA,EAAUrF,SACZ8I,EAAAA,EAAAA,KAAW1I,EAAQiF,EAAUrF,UAExCI,GAASia,EAAAA,EAAAA,IAAmBja,EAAQiF,EAAUrF,OAAQ,CACpDqoB,iBAAa5mB,KAKZ,IACFrB,EACHimB,WAAY,IACPjmB,EAAOimB,WACVhU,KAAM,KACD1M,EAAAA,EAAAA,IAAKvF,EAAOimB,WAAWhU,KAAM,CAACgW,EAAYtS,eAIrD,CAEO,SAAS6S,EACdxoB,EACAkoB,EACAE,GAEA,OAAKpoB,EAAOimB,WAAWC,kBAIhB5gB,EAAgBtF,EACrBA,EAAOimB,WAAWC,kBAClBgC,OACA7mB,EACA+mB,GAPOpoB,CAQX,CAEO,SAASyoB,EACdzoB,EACAioB,EACAxY,EACAiZ,EACAC,GAAgB,GAEhB,MAAM1jB,GAAYI,EAAAA,EAAAA,IAAgBrF,EAAQioB,GAC1C,OAAKhjB,EAIEK,EAAgBtF,EAAQioB,EAAa,CAC1CI,aAAc,IACTpjB,EAAUojB,aACb,CAAC5Y,GAAS,IACLxK,EAAUojB,aAAa5Y,MACvBiZ,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrB1jB,EAAUojB,aAAa5Y,IAAWkZ,EAAgB,EAAI,GAblD3oB,CAcX,C","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  type ChatListType,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omit, pick, unique,\n} from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarBots,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceSimilarChannels,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = addChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, userId, shouldRevokeHistory, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user, shouldRevokeHistory });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    shouldIgnoreCache,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    openInvoice,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      shouldIgnoreCache,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      mode: params.mode,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    chat = selectChat(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'PrivateChannelInaccessible' }, tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: { key: 'NoUsernameFound' }, tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, mode,\n    text, onChatChanged, choose, ref, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam && !ref\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n      return;\n    }\n\n    if (startAttach !== undefined && choose) {\n      actions.processAttachBotParameters({\n        username,\n        filter: choose,\n        startParam: startAttach || startApp,\n        tabId,\n      });\n      return;\n    }\n\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        startParam: startApp,\n        mode,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          ref,\n          startAttach,\n          attach,\n          text,\n          timestamp,\n        }, tabId,\n      );\n      if (onChatChanged) {\n        // @ts-ignore\n        actions[onChatChanged.action](onChatChanged.payload);\n      }\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    if (timestamp) {\n      actions.openMediaFromTimestamp({\n        chatId: usernameChat.id,\n        messageId: commentId,\n        timestamp,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      mode,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chatByUsername.id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (onChatChanged) {\n    // @ts-ignore\n    actions[onChatChanged.action](onChatChanged.payload);\n  }\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const {\n    id, commentId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (!commentId && !messageId && !threadId) {\n    actions.openChat({ id, tabId });\n    return;\n  }\n\n  if (timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: id,\n      messageId: commentId || messageId!,\n      timestamp,\n      tabId,\n    });\n  }\n\n  if (commentId && messageId) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    messageId,\n    threadId,\n    timestamp,\n  }, tabId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', { chat, offset });\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message === 'FLOOD') {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const currentNotJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const existingFolder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = ('title' in invite ? invite.title : existingFolder?.title)!;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    if (existingFolder) {\n      actions.showNotification({\n        title: {\n          key: 'FolderLinkNotificationUpdatedTitle',\n          variables: {\n            title: folderTitle.text,\n          },\n        },\n        message: {\n          key: 'FolderLinkNotificationUpdatedSubtitle',\n          variables: {\n            count: currentNotJoinedCount,\n          },\n          options: {\n            pluralValue: currentNotJoinedCount,\n          },\n        },\n        tabId,\n      });\n\n      return;\n    }\n\n    actions.showNotification({\n      title: {\n        key: 'FolderLinkNotificationAddedTitle',\n        variables: {\n          title: folderTitle.text,\n        },\n      },\n      message: {\n        key: 'FolderLinkNotificationAddedSubtitle',\n        variables: {\n          count: currentNotJoinedCount,\n        },\n        options: {\n          pluralValue: currentNotJoinedCount,\n        },\n      },\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n  if (!folder) return;\n\n  actions.showNotification({\n    title: {\n      key: 'FolderLinkNotificationDeletedTitle',\n      variables: {\n        title: folder.title.text,\n      },\n    },\n    message: {\n      key: 'FolderLinkNotificationDeletedSubtitle',\n      variables: {\n        count: peers.length,\n      },\n      options: {\n        pluralValue: peers.length,\n      },\n    },\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const currentIds = getOrderedIds(folderId);\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: unique([...(suggestions || []), ...(currentIds || [])]),\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = replaceSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('loadBotRecommendations', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectChat(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchBotsRecommendations', {\n    user,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarBots, count } = result;\n\n  const users = buildCollectionByKey(similarBots, 'id');\n\n  global = getGlobal();\n  global = addUsers(global, users);\n  global = addSimilarBots(global, userId, Object.keys(users), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !shouldIgnorePagination && !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = addChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n  referrer?: string,\n) {\n  global = getGlobal();\n  const localChat = !referrer ? selectChatByUsername(global, username) : undefined;\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username, referrer) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    ref?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, ref, startAttach, attach, text, timestamp,\n  } = params;\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const starRefStartPrefixes = global.appConfig?.starRefStartPrefixes;\n  let referrer = ref;\n  if (startParam && starRefStartPrefixes?.length) {\n    const prefix = starRefStartPrefixes.find((p) => startParam.startsWith(p));\n    if (prefix) {\n      referrer = startParam.slice(prefix.length);\n    }\n  }\n\n  const chat = await fetchChatByUsername(global, username, referrer);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  openChatWithParams(global, actions, chat, {\n    isCurrentChat,\n    threadId,\n    messageId: channelPostId,\n    startParam,\n    referrer,\n    startAttach,\n    attach,\n    text,\n    timestamp,\n  }, tabId);\n}\n\nasync function openChatWithParams<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chat: ApiChat,\n  params: {\n    isCurrentChat?: boolean;\n    threadId?: ThreadId;\n    messageId?: number;\n    startParam?: string;\n    referrer?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n    timestamp?: number;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    isCurrentChat, threadId, messageId, startParam, referrer, startAttach, attach, text, timestamp,\n  } = params;\n\n  if (messageId) {\n    let isTopicProcessed = false;\n    // In forums, link to a topic start message should open the topic\n    if (chat.isForum && !threadId) {\n      let topic = selectTopics(global, chat.id)?.[messageId];\n      if (!topic) {\n        const topicResult = await callApi('fetchTopicById', { chat, topicId: messageId });\n        topic = topicResult?.topic;\n      }\n\n      if (topic) {\n        actions.openThread({\n          chatId: chat.id, threadId: topic.id, tabId,\n        });\n        isTopicProcessed = true;\n      }\n    }\n\n    if (!isTopicProcessed) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, timestamp, tabId,\n      });\n    }\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam && !referrer) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n\n  if (messageId && timestamp) {\n    actions.openMediaFromTimestamp({\n      chatId: chat.id, threadId, messageId, timestamp, tabId,\n    });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","addChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","length","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","referrer","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openChatWithParams","isCurrentChat","messageId","startParam","startAttach","attach","text","timestamp","isTopicProcessed","topic","selectTopics","topicResult","topicId","openThread","focusMessage","startBot","botId","param","openAttachMenuFromLink","openChatWithDraft","openMediaFromTimestamp","callAttachBot","ensureIsSuperGroup","selectChat","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","shouldRevokeHistory","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","shouldIgnoreCache","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","storyId","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","hasOwnProperty","inviteHash","voicechat","livestream","substring","start","startApp","startapp","mode","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","usernameOrId","isPrivate","key","isChatChannel","isChatSuperGroup","openBoostModal","onChatChanged","choose","ref","selectCurrentChat","webAppName","usernames","c","processAttachBotParameters","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","channelPostId","currentChat","starRefStartPrefixes","appConfig","prefix","p","slice","action","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","chatlistModal","peerIds","peers","currentNotJoinedCount","peer","isNotJoined","existingFolder","folderTitle","variables","options","pluralValue","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","currentIds","suggestions","removal","suggestedPeerIds","unique","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","replaceSimilarChannels","similarBots","addSimilarBots","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}